#!/usr/bin/env bash
set -uo pipefail

ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
TIMESTAMP="$(date -u +"%Y%m%dT%H%M%SZ")"
LOG_DIR="$ROOT_DIR/logs"
ARTIFACT_DIR="$ROOT_DIR/artifacts"
AUDIT_DIR="$ROOT_DIR/audit"
REPORT_MD="$AUDIT_DIR/report-${TIMESTAMP}.md"
REPORT_JSON="$AUDIT_DIR/report-${TIMESTAMP}.json"
TMP_RESULTS="$(mktemp)"

mkdir -p "$LOG_DIR" "$ARTIFACT_DIR" "$AUDIT_DIR"

declare -a TABLE_ROWS=()
declare -a DETAIL_SECTIONS=()
overall_status=0

slugify() {
  echo "$1" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/-/g; s/^-+//; s/-+$//; s/-+/-/g'
}

run() {
  local name="$1"
  shift
  local slug
  slug="$(slugify "$name")"
  if [[ -z "$slug" ]]; then
    slug="task"
  fi
  local log_file="$LOG_DIR/${TIMESTAMP}-${slug}.log"
  local log_rel="${log_file#$ROOT_DIR/}"
  local start_epoch end_epoch duration status icon
  local start_utc end_utc

  printf "\n[%%s] Starting %%s\n" "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" "$name"
  start_epoch="$(date +%s)"
  start_utc="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
  if "$@" >"$log_file" 2>&1; then
    status="success"
    icon="✅"
  else
    status="failure"
    icon="❌"
    overall_status=1
  fi
  end_epoch="$(date +%s)"
  end_utc="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
  duration=$((end_epoch - start_epoch))
  printf "[%%s] Finished %%s (status: %%s, duration: %%ss)\n" "$(date -u +"%Y-%m-%dT%H:%M:%SZ")" "$name" "$status" "$duration"

  TABLE_ROWS+=("| ${icon} ${name} | ${status} | ${duration} | [log](${log_rel}) |")
  DETAIL_SECTIONS+=("### ${icon} ${name}\n\n- Status: **${status^^}**\n- Started: ${start_utc}\n- Finished: ${end_utc}\n- Duration: ${duration}s\n- Log: [${log_rel}](${log_rel})\n")
  printf '%s|%s|%s|%s|%s|%s\n' "$name" "$status" "$duration" "$log_rel" "$start_utc" "$end_utc" >>"$TMP_RESULTS"
}

run "make tidy" make tidy
run "make sdk" make sdk
run "make docs verify" make docs:verify

audit_rel="${REPORT_MD#$ROOT_DIR/}"
report_rel="${REPORT_JSON#$ROOT_DIR/}"

{
  printf '# Audit Report — %s\n\n' "$TIMESTAMP"
  printf 'Generated by `%s` on host `%s`.\n\n' "$(basename "$0")" "$(hostname -s || hostname)"
  printf '## Summary\n'
  printf '| Task | Status | Duration (s) | Log |\n'
  printf '| --- | --- | --- | --- |\n'
  for row in "${TABLE_ROWS[@]}"; do
    printf '%s\n' "$row"
  done
  printf '\n## Details\n\n'
  for section in "${DETAIL_SECTIONS[@]}"; do
    printf '%b\n' "$section"
  done
} >"$REPORT_MD"

python3 - <<PY
import json
from pathlib import Path

tmp_path = Path("$TMP_RESULTS")
results = []
for line in tmp_path.read_text().splitlines():
    if not line.strip():
        continue
    name, status, duration, log_rel, start_utc, end_utc = line.split("|")
    results.append({
        "name": name,
        "status": status,
        "duration_seconds": int(duration),
        "log": log_rel,
        "started_at": start_utc,
        "finished_at": end_utc,
    })
report = {
    "timestamp": "$TIMESTAMP",
    "results": results,
    "artifacts": {
        "markdown": "$audit_rel",
        "json": "$report_rel",
    },
    "exit_code": $overall_status,
}
Path("$REPORT_JSON").write_text(json.dumps(report, indent=2) + "\n")
PY

rm -f "$TMP_RESULTS"

printf '\nAudit artifacts:\n- %s\n- %s\n' "$audit_rel" "$report_rel"

exit $overall_status
