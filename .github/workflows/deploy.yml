name: Deploy Artifacts

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  proto-compatibility:
    name: Validate protobuf compatibility
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.0'
          check-latest: true
          cache: true

      - name: Install Buf
        run: go install github.com/bufbuild/buf/cmd/buf@latest

      - name: Fetch main branch
        run: git fetch origin main:refs/remotes/origin/main

      - name: Run buf lint
        id: buf_lint
        continue-on-error: true
        run: |
          set -euo pipefail
          mkdir -p artifacts
          buf lint | tee artifacts/buf-lint.log

      - name: Run buf breaking
        id: buf_breaking
        continue-on-error: true
        run: |
          set -euo pipefail
          mkdir -p artifacts
          buf breaking --against '.git#branch=main' | tee artifacts/buf-breaking.log

      - name: Evaluate buf results
        if: steps.buf_lint.outcome == 'failure' || steps.buf_breaking.outcome == 'failure'
        run: exit 1

      - name: Upload buf artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: buf-validation-logs
          path: artifacts

  build-images:
    name: Build and publish images
    needs: proto-compatibility
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service:
          - name: gateway
            target: ./cmd/gateway
          - name: consensusd
            target: ./cmd/consensusd
          - name: p2pd
            target: ./cmd/p2pd
          - name: lendingd
            target: ./services/lendingd
          - name: swapd
            target: ./services/swapd
          - name: governd
            target: ./services/governd
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/${{ matrix.service.name }}
          tags: |
            type=ref,event=tag
            type=sha
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deploy/compose/Dockerfile
          build-args: |
            TARGET=${{ matrix.service.target }}
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  publish-charts:
    name: Package Helm charts
    needs: build-images
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chart:
          - gateway
          - consensusd
          - p2pd
          - lendingd
          - swapd
          - governd
    steps:
      - uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4

      - name: Log in to GHCR for Helm
        run: helm registry login ghcr.io -u "$GITHUB_ACTOR" -p "${{ secrets.GITHUB_TOKEN }}"

      - name: Package and push chart
        run: |
          mkdir -p dist
          pkg=$(helm package deploy/helm/${{ matrix.chart }} --destination dist | awk '{print $NF}')
          helm push "$pkg" oci://ghcr.io/${{ github.repository_owner }}/nhb-charts
