// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: gov/v1/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "gov.v1";

export interface MsgSubmitProposal {
  proposer: string;
  title: string;
  description: string;
  deposit: string;
}

export interface MsgVote {
  voter: string;
  proposalId: number;
  option: string;
}

export interface MsgDeposit {
  depositor: string;
  proposalId: number;
  amount: string;
}

function createBaseMsgSubmitProposal(): MsgSubmitProposal {
  return { proposer: "", title: "", description: "", deposit: "" };
}

export const MsgSubmitProposal: MessageFns<MsgSubmitProposal> = {
  encode(message: MsgSubmitProposal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.proposer !== "") {
      writer.uint32(10).string(message.proposer);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.deposit !== "") {
      writer.uint32(34).string(message.deposit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgSubmitProposal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSubmitProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.proposer = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.deposit = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSubmitProposal {
    return {
      proposer: isSet(object.proposer) ? globalThis.String(object.proposer) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      deposit: isSet(object.deposit) ? globalThis.String(object.deposit) : "",
    };
  },

  toJSON(message: MsgSubmitProposal): unknown {
    const obj: any = {};
    if (message.proposer !== "") {
      obj.proposer = message.proposer;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.deposit !== "") {
      obj.deposit = message.deposit;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgSubmitProposal>): MsgSubmitProposal {
    return MsgSubmitProposal.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgSubmitProposal>): MsgSubmitProposal {
    const message = createBaseMsgSubmitProposal();
    message.proposer = object.proposer ?? "";
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.deposit = object.deposit ?? "";
    return message;
  },
};

function createBaseMsgVote(): MsgVote {
  return { voter: "", proposalId: 0, option: "" };
}

export const MsgVote: MessageFns<MsgVote> = {
  encode(message: MsgVote, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.voter !== "") {
      writer.uint32(10).string(message.voter);
    }
    if (message.proposalId !== 0) {
      writer.uint32(16).uint64(message.proposalId);
    }
    if (message.option !== "") {
      writer.uint32(26).string(message.option);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgVote {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgVote();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.voter = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.proposalId = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.option = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgVote {
    return {
      voter: isSet(object.voter) ? globalThis.String(object.voter) : "",
      proposalId: isSet(object.proposalId) ? globalThis.Number(object.proposalId) : 0,
      option: isSet(object.option) ? globalThis.String(object.option) : "",
    };
  },

  toJSON(message: MsgVote): unknown {
    const obj: any = {};
    if (message.voter !== "") {
      obj.voter = message.voter;
    }
    if (message.proposalId !== 0) {
      obj.proposalId = Math.round(message.proposalId);
    }
    if (message.option !== "") {
      obj.option = message.option;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgVote>): MsgVote {
    return MsgVote.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgVote>): MsgVote {
    const message = createBaseMsgVote();
    message.voter = object.voter ?? "";
    message.proposalId = object.proposalId ?? 0;
    message.option = object.option ?? "";
    return message;
  },
};

function createBaseMsgDeposit(): MsgDeposit {
  return { depositor: "", proposalId: 0, amount: "" };
}

export const MsgDeposit: MessageFns<MsgDeposit> = {
  encode(message: MsgDeposit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.depositor !== "") {
      writer.uint32(10).string(message.depositor);
    }
    if (message.proposalId !== 0) {
      writer.uint32(16).uint64(message.proposalId);
    }
    if (message.amount !== "") {
      writer.uint32(26).string(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeposit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeposit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.depositor = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.proposalId = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.amount = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDeposit {
    return {
      depositor: isSet(object.depositor) ? globalThis.String(object.depositor) : "",
      proposalId: isSet(object.proposalId) ? globalThis.Number(object.proposalId) : 0,
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
    };
  },

  toJSON(message: MsgDeposit): unknown {
    const obj: any = {};
    if (message.depositor !== "") {
      obj.depositor = message.depositor;
    }
    if (message.proposalId !== 0) {
      obj.proposalId = Math.round(message.proposalId);
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgDeposit>): MsgDeposit {
    return MsgDeposit.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgDeposit>): MsgDeposit {
    const message = createBaseMsgDeposit();
    message.depositor = object.depositor ?? "";
    message.proposalId = object.proposalId ?? 0;
    message.amount = object.amount ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
