// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: gov/v1/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "gov.v1";

export interface MsgSubmitProposal {
  proposer: string;
  title: string;
  description: string;
  deposit: string;
}

export interface MsgSubmitProposalResponse {
  txHash: string;
}

export interface MsgVote {
  voter: string;
  proposalId: number;
  option: string;
}

export interface MsgVoteResponse {
  txHash: string;
}

export interface Pauses {
  lending: boolean;
  swap: boolean;
  escrow: boolean;
  trade: boolean;
  loyalty: boolean;
  potso: boolean;
}

export interface MsgSetPauses {
  authority: string;
  pauses: Pauses | undefined;
}

export interface MsgSetPausesResponse {
  txHash: string;
}

export interface MsgDeposit {
  depositor: string;
  proposalId: number;
  amount: string;
}

export interface MsgDepositResponse {
  txHash: string;
}

function createBaseMsgSubmitProposal(): MsgSubmitProposal {
  return { proposer: "", title: "", description: "", deposit: "" };
}

export const MsgSubmitProposal: MessageFns<MsgSubmitProposal> = {
  encode(message: MsgSubmitProposal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.proposer !== "") {
      writer.uint32(10).string(message.proposer);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.deposit !== "") {
      writer.uint32(34).string(message.deposit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgSubmitProposal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSubmitProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.proposer = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.deposit = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSubmitProposal {
    return {
      proposer: isSet(object.proposer) ? globalThis.String(object.proposer) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      deposit: isSet(object.deposit) ? globalThis.String(object.deposit) : "",
    };
  },

  toJSON(message: MsgSubmitProposal): unknown {
    const obj: any = {};
    if (message.proposer !== "") {
      obj.proposer = message.proposer;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.deposit !== "") {
      obj.deposit = message.deposit;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgSubmitProposal>): MsgSubmitProposal {
    return MsgSubmitProposal.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgSubmitProposal>): MsgSubmitProposal {
    const message = createBaseMsgSubmitProposal();
    message.proposer = object.proposer ?? "";
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.deposit = object.deposit ?? "";
    return message;
  },
};

function createBaseMsgSubmitProposalResponse(): MsgSubmitProposalResponse {
  return { txHash: "" };
}

export const MsgSubmitProposalResponse: MessageFns<MsgSubmitProposalResponse> = {
  encode(message: MsgSubmitProposalResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.txHash !== "") {
      writer.uint32(10).string(message.txHash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgSubmitProposalResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSubmitProposalResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.txHash = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSubmitProposalResponse {
    return { txHash: isSet(object.txHash) ? globalThis.String(object.txHash) : "" };
  },

  toJSON(message: MsgSubmitProposalResponse): unknown {
    const obj: any = {};
    if (message.txHash !== "") {
      obj.txHash = message.txHash;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgSubmitProposalResponse>): MsgSubmitProposalResponse {
    return MsgSubmitProposalResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgSubmitProposalResponse>): MsgSubmitProposalResponse {
    const message = createBaseMsgSubmitProposalResponse();
    message.txHash = object.txHash ?? "";
    return message;
  },
};

function createBaseMsgVote(): MsgVote {
  return { voter: "", proposalId: 0, option: "" };
}

export const MsgVote: MessageFns<MsgVote> = {
  encode(message: MsgVote, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.voter !== "") {
      writer.uint32(10).string(message.voter);
    }
    if (message.proposalId !== 0) {
      writer.uint32(16).uint64(message.proposalId);
    }
    if (message.option !== "") {
      writer.uint32(26).string(message.option);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgVote {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgVote();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.voter = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.proposalId = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.option = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgVote {
    return {
      voter: isSet(object.voter) ? globalThis.String(object.voter) : "",
      proposalId: isSet(object.proposalId) ? globalThis.Number(object.proposalId) : 0,
      option: isSet(object.option) ? globalThis.String(object.option) : "",
    };
  },

  toJSON(message: MsgVote): unknown {
    const obj: any = {};
    if (message.voter !== "") {
      obj.voter = message.voter;
    }
    if (message.proposalId !== 0) {
      obj.proposalId = Math.round(message.proposalId);
    }
    if (message.option !== "") {
      obj.option = message.option;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgVote>): MsgVote {
    return MsgVote.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgVote>): MsgVote {
    const message = createBaseMsgVote();
    message.voter = object.voter ?? "";
    message.proposalId = object.proposalId ?? 0;
    message.option = object.option ?? "";
    return message;
  },
};

function createBaseMsgVoteResponse(): MsgVoteResponse {
  return { txHash: "" };
}

export const MsgVoteResponse: MessageFns<MsgVoteResponse> = {
  encode(message: MsgVoteResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.txHash !== "") {
      writer.uint32(10).string(message.txHash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgVoteResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgVoteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.txHash = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgVoteResponse {
    return { txHash: isSet(object.txHash) ? globalThis.String(object.txHash) : "" };
  },

  toJSON(message: MsgVoteResponse): unknown {
    const obj: any = {};
    if (message.txHash !== "") {
      obj.txHash = message.txHash;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgVoteResponse>): MsgVoteResponse {
    return MsgVoteResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgVoteResponse>): MsgVoteResponse {
    const message = createBaseMsgVoteResponse();
    message.txHash = object.txHash ?? "";
    return message;
  },
};

function createBasePauses(): Pauses {
  return { lending: false, swap: false, escrow: false, trade: false, loyalty: false, potso: false };
}

export const Pauses: MessageFns<Pauses> = {
  encode(message: Pauses, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lending !== false) {
      writer.uint32(8).bool(message.lending);
    }
    if (message.swap !== false) {
      writer.uint32(16).bool(message.swap);
    }
    if (message.escrow !== false) {
      writer.uint32(24).bool(message.escrow);
    }
    if (message.trade !== false) {
      writer.uint32(32).bool(message.trade);
    }
    if (message.loyalty !== false) {
      writer.uint32(40).bool(message.loyalty);
    }
    if (message.potso !== false) {
      writer.uint32(48).bool(message.potso);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Pauses {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePauses();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.lending = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.swap = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.escrow = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.trade = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.loyalty = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.potso = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Pauses {
    return {
      lending: isSet(object.lending) ? globalThis.Boolean(object.lending) : false,
      swap: isSet(object.swap) ? globalThis.Boolean(object.swap) : false,
      escrow: isSet(object.escrow) ? globalThis.Boolean(object.escrow) : false,
      trade: isSet(object.trade) ? globalThis.Boolean(object.trade) : false,
      loyalty: isSet(object.loyalty) ? globalThis.Boolean(object.loyalty) : false,
      potso: isSet(object.potso) ? globalThis.Boolean(object.potso) : false,
    };
  },

  toJSON(message: Pauses): unknown {
    const obj: any = {};
    if (message.lending !== false) {
      obj.lending = message.lending;
    }
    if (message.swap !== false) {
      obj.swap = message.swap;
    }
    if (message.escrow !== false) {
      obj.escrow = message.escrow;
    }
    if (message.trade !== false) {
      obj.trade = message.trade;
    }
    if (message.loyalty !== false) {
      obj.loyalty = message.loyalty;
    }
    if (message.potso !== false) {
      obj.potso = message.potso;
    }
    return obj;
  },

  create(base?: DeepPartial<Pauses>): Pauses {
    return Pauses.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Pauses>): Pauses {
    const message = createBasePauses();
    message.lending = object.lending ?? false;
    message.swap = object.swap ?? false;
    message.escrow = object.escrow ?? false;
    message.trade = object.trade ?? false;
    message.loyalty = object.loyalty ?? false;
    message.potso = object.potso ?? false;
    return message;
  },
};

function createBaseMsgSetPauses(): MsgSetPauses {
  return { authority: "", pauses: undefined };
}

export const MsgSetPauses: MessageFns<MsgSetPauses> = {
  encode(message: MsgSetPauses, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.pauses !== undefined) {
      Pauses.encode(message.pauses, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgSetPauses {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetPauses();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pauses = Pauses.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSetPauses {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      pauses: isSet(object.pauses) ? Pauses.fromJSON(object.pauses) : undefined,
    };
  },

  toJSON(message: MsgSetPauses): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.pauses !== undefined) {
      obj.pauses = Pauses.toJSON(message.pauses);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgSetPauses>): MsgSetPauses {
    return MsgSetPauses.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgSetPauses>): MsgSetPauses {
    const message = createBaseMsgSetPauses();
    message.authority = object.authority ?? "";
    message.pauses = (object.pauses !== undefined && object.pauses !== null)
      ? Pauses.fromPartial(object.pauses)
      : undefined;
    return message;
  },
};

function createBaseMsgSetPausesResponse(): MsgSetPausesResponse {
  return { txHash: "" };
}

export const MsgSetPausesResponse: MessageFns<MsgSetPausesResponse> = {
  encode(message: MsgSetPausesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.txHash !== "") {
      writer.uint32(10).string(message.txHash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgSetPausesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetPausesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.txHash = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSetPausesResponse {
    return { txHash: isSet(object.txHash) ? globalThis.String(object.txHash) : "" };
  },

  toJSON(message: MsgSetPausesResponse): unknown {
    const obj: any = {};
    if (message.txHash !== "") {
      obj.txHash = message.txHash;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgSetPausesResponse>): MsgSetPausesResponse {
    return MsgSetPausesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgSetPausesResponse>): MsgSetPausesResponse {
    const message = createBaseMsgSetPausesResponse();
    message.txHash = object.txHash ?? "";
    return message;
  },
};

function createBaseMsgDeposit(): MsgDeposit {
  return { depositor: "", proposalId: 0, amount: "" };
}

export const MsgDeposit: MessageFns<MsgDeposit> = {
  encode(message: MsgDeposit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.depositor !== "") {
      writer.uint32(10).string(message.depositor);
    }
    if (message.proposalId !== 0) {
      writer.uint32(16).uint64(message.proposalId);
    }
    if (message.amount !== "") {
      writer.uint32(26).string(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDeposit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDeposit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.depositor = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.proposalId = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.amount = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDeposit {
    return {
      depositor: isSet(object.depositor) ? globalThis.String(object.depositor) : "",
      proposalId: isSet(object.proposalId) ? globalThis.Number(object.proposalId) : 0,
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
    };
  },

  toJSON(message: MsgDeposit): unknown {
    const obj: any = {};
    if (message.depositor !== "") {
      obj.depositor = message.depositor;
    }
    if (message.proposalId !== 0) {
      obj.proposalId = Math.round(message.proposalId);
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgDeposit>): MsgDeposit {
    return MsgDeposit.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgDeposit>): MsgDeposit {
    const message = createBaseMsgDeposit();
    message.depositor = object.depositor ?? "";
    message.proposalId = object.proposalId ?? 0;
    message.amount = object.amount ?? "";
    return message;
  },
};

function createBaseMsgDepositResponse(): MsgDepositResponse {
  return { txHash: "" };
}

export const MsgDepositResponse: MessageFns<MsgDepositResponse> = {
  encode(message: MsgDepositResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.txHash !== "") {
      writer.uint32(10).string(message.txHash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgDepositResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgDepositResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.txHash = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgDepositResponse {
    return { txHash: isSet(object.txHash) ? globalThis.String(object.txHash) : "" };
  },

  toJSON(message: MsgDepositResponse): unknown {
    const obj: any = {};
    if (message.txHash !== "") {
      obj.txHash = message.txHash;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgDepositResponse>): MsgDepositResponse {
    return MsgDepositResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgDepositResponse>): MsgDepositResponse {
    const message = createBaseMsgDepositResponse();
    message.txHash = object.txHash ?? "";
    return message;
  },
};

export type MsgService = typeof MsgService;
export const MsgService = {
  submitProposal: {
    path: "/gov.v1.Msg/SubmitProposal",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: MsgSubmitProposal): Buffer => Buffer.from(MsgSubmitProposal.encode(value).finish()),
    requestDeserialize: (value: Buffer): MsgSubmitProposal => MsgSubmitProposal.decode(value),
    responseSerialize: (value: MsgSubmitProposalResponse): Buffer =>
      Buffer.from(MsgSubmitProposalResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): MsgSubmitProposalResponse => MsgSubmitProposalResponse.decode(value),
  },
  vote: {
    path: "/gov.v1.Msg/Vote",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: MsgVote): Buffer => Buffer.from(MsgVote.encode(value).finish()),
    requestDeserialize: (value: Buffer): MsgVote => MsgVote.decode(value),
    responseSerialize: (value: MsgVoteResponse): Buffer => Buffer.from(MsgVoteResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): MsgVoteResponse => MsgVoteResponse.decode(value),
  },
  setPauses: {
    path: "/gov.v1.Msg/SetPauses",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: MsgSetPauses): Buffer => Buffer.from(MsgSetPauses.encode(value).finish()),
    requestDeserialize: (value: Buffer): MsgSetPauses => MsgSetPauses.decode(value),
    responseSerialize: (value: MsgSetPausesResponse): Buffer =>
      Buffer.from(MsgSetPausesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): MsgSetPausesResponse => MsgSetPausesResponse.decode(value),
  },
  deposit: {
    path: "/gov.v1.Msg/Deposit",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: MsgDeposit): Buffer => Buffer.from(MsgDeposit.encode(value).finish()),
    requestDeserialize: (value: Buffer): MsgDeposit => MsgDeposit.decode(value),
    responseSerialize: (value: MsgDepositResponse): Buffer => Buffer.from(MsgDepositResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): MsgDepositResponse => MsgDepositResponse.decode(value),
  },
} as const;

export interface MsgServer extends UntypedServiceImplementation {
  submitProposal: handleUnaryCall<MsgSubmitProposal, MsgSubmitProposalResponse>;
  vote: handleUnaryCall<MsgVote, MsgVoteResponse>;
  setPauses: handleUnaryCall<MsgSetPauses, MsgSetPausesResponse>;
  deposit: handleUnaryCall<MsgDeposit, MsgDepositResponse>;
}

export interface MsgClient extends Client {
  submitProposal(
    request: MsgSubmitProposal,
    callback: (error: ServiceError | null, response: MsgSubmitProposalResponse) => void,
  ): ClientUnaryCall;
  submitProposal(
    request: MsgSubmitProposal,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: MsgSubmitProposalResponse) => void,
  ): ClientUnaryCall;
  submitProposal(
    request: MsgSubmitProposal,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: MsgSubmitProposalResponse) => void,
  ): ClientUnaryCall;
  vote(request: MsgVote, callback: (error: ServiceError | null, response: MsgVoteResponse) => void): ClientUnaryCall;
  vote(
    request: MsgVote,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: MsgVoteResponse) => void,
  ): ClientUnaryCall;
  vote(
    request: MsgVote,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: MsgVoteResponse) => void,
  ): ClientUnaryCall;
  setPauses(
    request: MsgSetPauses,
    callback: (error: ServiceError | null, response: MsgSetPausesResponse) => void,
  ): ClientUnaryCall;
  setPauses(
    request: MsgSetPauses,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: MsgSetPausesResponse) => void,
  ): ClientUnaryCall;
  setPauses(
    request: MsgSetPauses,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: MsgSetPausesResponse) => void,
  ): ClientUnaryCall;
  deposit(
    request: MsgDeposit,
    callback: (error: ServiceError | null, response: MsgDepositResponse) => void,
  ): ClientUnaryCall;
  deposit(
    request: MsgDeposit,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: MsgDepositResponse) => void,
  ): ClientUnaryCall;
  deposit(
    request: MsgDeposit,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: MsgDepositResponse) => void,
  ): ClientUnaryCall;
}

export const MsgClient = makeGenericClientConstructor(MsgService, "gov.v1.Msg") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): MsgClient;
  service: typeof MsgService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
