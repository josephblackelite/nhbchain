// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: gov/v1/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Timestamp } from "../../google/protobuf/timestamp";

export const protobufPackage = "gov.v1";

export enum ProposalStatus {
  PROPOSAL_STATUS_UNSPECIFIED = 0,
  PROPOSAL_STATUS_DEPOSIT_PERIOD = 1,
  PROPOSAL_STATUS_VOTING_PERIOD = 2,
  PROPOSAL_STATUS_PASSED = 3,
  PROPOSAL_STATUS_REJECTED = 4,
  PROPOSAL_STATUS_FAILED = 5,
  PROPOSAL_STATUS_EXPIRED = 6,
  PROPOSAL_STATUS_EXECUTED = 7,
  UNRECOGNIZED = -1,
}

export function proposalStatusFromJSON(object: any): ProposalStatus {
  switch (object) {
    case 0:
    case "PROPOSAL_STATUS_UNSPECIFIED":
      return ProposalStatus.PROPOSAL_STATUS_UNSPECIFIED;
    case 1:
    case "PROPOSAL_STATUS_DEPOSIT_PERIOD":
      return ProposalStatus.PROPOSAL_STATUS_DEPOSIT_PERIOD;
    case 2:
    case "PROPOSAL_STATUS_VOTING_PERIOD":
      return ProposalStatus.PROPOSAL_STATUS_VOTING_PERIOD;
    case 3:
    case "PROPOSAL_STATUS_PASSED":
      return ProposalStatus.PROPOSAL_STATUS_PASSED;
    case 4:
    case "PROPOSAL_STATUS_REJECTED":
      return ProposalStatus.PROPOSAL_STATUS_REJECTED;
    case 5:
    case "PROPOSAL_STATUS_FAILED":
      return ProposalStatus.PROPOSAL_STATUS_FAILED;
    case 6:
    case "PROPOSAL_STATUS_EXPIRED":
      return ProposalStatus.PROPOSAL_STATUS_EXPIRED;
    case 7:
    case "PROPOSAL_STATUS_EXECUTED":
      return ProposalStatus.PROPOSAL_STATUS_EXECUTED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ProposalStatus.UNRECOGNIZED;
  }
}

export function proposalStatusToJSON(object: ProposalStatus): string {
  switch (object) {
    case ProposalStatus.PROPOSAL_STATUS_UNSPECIFIED:
      return "PROPOSAL_STATUS_UNSPECIFIED";
    case ProposalStatus.PROPOSAL_STATUS_DEPOSIT_PERIOD:
      return "PROPOSAL_STATUS_DEPOSIT_PERIOD";
    case ProposalStatus.PROPOSAL_STATUS_VOTING_PERIOD:
      return "PROPOSAL_STATUS_VOTING_PERIOD";
    case ProposalStatus.PROPOSAL_STATUS_PASSED:
      return "PROPOSAL_STATUS_PASSED";
    case ProposalStatus.PROPOSAL_STATUS_REJECTED:
      return "PROPOSAL_STATUS_REJECTED";
    case ProposalStatus.PROPOSAL_STATUS_FAILED:
      return "PROPOSAL_STATUS_FAILED";
    case ProposalStatus.PROPOSAL_STATUS_EXPIRED:
      return "PROPOSAL_STATUS_EXPIRED";
    case ProposalStatus.PROPOSAL_STATUS_EXECUTED:
      return "PROPOSAL_STATUS_EXECUTED";
    case ProposalStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Proposal {
  id: number;
  title: string;
  summary: string;
  metadataUri: string;
  proposer: string;
  status: ProposalStatus;
  deposit: string;
  submitTime: Date | undefined;
  votingStartTime: Date | undefined;
  votingEndTime: Date | undefined;
  timelockEndTime: Date | undefined;
  target: string;
  proposedChange: string;
  queued: boolean;
}

export interface ProposalTally {
  proposalId: number;
  status: ProposalStatus;
  turnoutBps: number;
  quorumBps: number;
  yesPowerBps: number;
  noPowerBps: number;
  abstainPowerBps: number;
  yesRatioBps: number;
  passThresholdBps: number;
  totalBallots: number;
}

export interface GetProposalRequest {
  id: number;
}

export interface GetProposalResponse {
  proposal: Proposal | undefined;
}

export interface ListProposalsRequest {
  pageSize: number;
  pageToken: string;
  statusFilter: ProposalStatus;
}

export interface ListProposalsResponse {
  proposals: Proposal[];
  nextPageToken: string;
}

export interface GetTallyRequest {
  id: number;
}

export interface GetTallyResponse {
  tally: ProposalTally | undefined;
}

function createBaseProposal(): Proposal {
  return {
    id: 0,
    title: "",
    summary: "",
    metadataUri: "",
    proposer: "",
    status: 0,
    deposit: "",
    submitTime: undefined,
    votingStartTime: undefined,
    votingEndTime: undefined,
    timelockEndTime: undefined,
    target: "",
    proposedChange: "",
    queued: false,
  };
}

export const Proposal: MessageFns<Proposal> = {
  encode(message: Proposal, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.summary !== "") {
      writer.uint32(26).string(message.summary);
    }
    if (message.metadataUri !== "") {
      writer.uint32(34).string(message.metadataUri);
    }
    if (message.proposer !== "") {
      writer.uint32(42).string(message.proposer);
    }
    if (message.status !== 0) {
      writer.uint32(48).int32(message.status);
    }
    if (message.deposit !== "") {
      writer.uint32(58).string(message.deposit);
    }
    if (message.submitTime !== undefined) {
      Timestamp.encode(toTimestamp(message.submitTime), writer.uint32(66).fork()).join();
    }
    if (message.votingStartTime !== undefined) {
      Timestamp.encode(toTimestamp(message.votingStartTime), writer.uint32(74).fork()).join();
    }
    if (message.votingEndTime !== undefined) {
      Timestamp.encode(toTimestamp(message.votingEndTime), writer.uint32(82).fork()).join();
    }
    if (message.timelockEndTime !== undefined) {
      Timestamp.encode(toTimestamp(message.timelockEndTime), writer.uint32(90).fork()).join();
    }
    if (message.target !== "") {
      writer.uint32(98).string(message.target);
    }
    if (message.proposedChange !== "") {
      writer.uint32(106).string(message.proposedChange);
    }
    if (message.queued !== false) {
      writer.uint32(112).bool(message.queued);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Proposal {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.summary = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.metadataUri = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.proposer = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.deposit = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.submitTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.votingStartTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.votingEndTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.timelockEndTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.target = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.proposedChange = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.queued = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Proposal {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      summary: isSet(object.summary) ? globalThis.String(object.summary) : "",
      metadataUri: isSet(object.metadataUri) ? globalThis.String(object.metadataUri) : "",
      proposer: isSet(object.proposer) ? globalThis.String(object.proposer) : "",
      status: isSet(object.status) ? proposalStatusFromJSON(object.status) : 0,
      deposit: isSet(object.deposit) ? globalThis.String(object.deposit) : "",
      submitTime: isSet(object.submitTime) ? fromJsonTimestamp(object.submitTime) : undefined,
      votingStartTime: isSet(object.votingStartTime) ? fromJsonTimestamp(object.votingStartTime) : undefined,
      votingEndTime: isSet(object.votingEndTime) ? fromJsonTimestamp(object.votingEndTime) : undefined,
      timelockEndTime: isSet(object.timelockEndTime) ? fromJsonTimestamp(object.timelockEndTime) : undefined,
      target: isSet(object.target) ? globalThis.String(object.target) : "",
      proposedChange: isSet(object.proposedChange) ? globalThis.String(object.proposedChange) : "",
      queued: isSet(object.queued) ? globalThis.Boolean(object.queued) : false,
    };
  },

  toJSON(message: Proposal): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.summary !== "") {
      obj.summary = message.summary;
    }
    if (message.metadataUri !== "") {
      obj.metadataUri = message.metadataUri;
    }
    if (message.proposer !== "") {
      obj.proposer = message.proposer;
    }
    if (message.status !== 0) {
      obj.status = proposalStatusToJSON(message.status);
    }
    if (message.deposit !== "") {
      obj.deposit = message.deposit;
    }
    if (message.submitTime !== undefined) {
      obj.submitTime = message.submitTime.toISOString();
    }
    if (message.votingStartTime !== undefined) {
      obj.votingStartTime = message.votingStartTime.toISOString();
    }
    if (message.votingEndTime !== undefined) {
      obj.votingEndTime = message.votingEndTime.toISOString();
    }
    if (message.timelockEndTime !== undefined) {
      obj.timelockEndTime = message.timelockEndTime.toISOString();
    }
    if (message.target !== "") {
      obj.target = message.target;
    }
    if (message.proposedChange !== "") {
      obj.proposedChange = message.proposedChange;
    }
    if (message.queued !== false) {
      obj.queued = message.queued;
    }
    return obj;
  },

  create(base?: DeepPartial<Proposal>): Proposal {
    return Proposal.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Proposal>): Proposal {
    const message = createBaseProposal();
    message.id = object.id ?? 0;
    message.title = object.title ?? "";
    message.summary = object.summary ?? "";
    message.metadataUri = object.metadataUri ?? "";
    message.proposer = object.proposer ?? "";
    message.status = object.status ?? 0;
    message.deposit = object.deposit ?? "";
    message.submitTime = object.submitTime ?? undefined;
    message.votingStartTime = object.votingStartTime ?? undefined;
    message.votingEndTime = object.votingEndTime ?? undefined;
    message.timelockEndTime = object.timelockEndTime ?? undefined;
    message.target = object.target ?? "";
    message.proposedChange = object.proposedChange ?? "";
    message.queued = object.queued ?? false;
    return message;
  },
};

function createBaseProposalTally(): ProposalTally {
  return {
    proposalId: 0,
    status: 0,
    turnoutBps: 0,
    quorumBps: 0,
    yesPowerBps: 0,
    noPowerBps: 0,
    abstainPowerBps: 0,
    yesRatioBps: 0,
    passThresholdBps: 0,
    totalBallots: 0,
  };
}

export const ProposalTally: MessageFns<ProposalTally> = {
  encode(message: ProposalTally, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.proposalId !== 0) {
      writer.uint32(8).uint64(message.proposalId);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    if (message.turnoutBps !== 0) {
      writer.uint32(24).uint64(message.turnoutBps);
    }
    if (message.quorumBps !== 0) {
      writer.uint32(32).uint64(message.quorumBps);
    }
    if (message.yesPowerBps !== 0) {
      writer.uint32(40).uint64(message.yesPowerBps);
    }
    if (message.noPowerBps !== 0) {
      writer.uint32(48).uint64(message.noPowerBps);
    }
    if (message.abstainPowerBps !== 0) {
      writer.uint32(56).uint64(message.abstainPowerBps);
    }
    if (message.yesRatioBps !== 0) {
      writer.uint32(64).uint64(message.yesRatioBps);
    }
    if (message.passThresholdBps !== 0) {
      writer.uint32(72).uint64(message.passThresholdBps);
    }
    if (message.totalBallots !== 0) {
      writer.uint32(80).uint64(message.totalBallots);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProposalTally {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProposalTally();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.proposalId = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.turnoutBps = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.quorumBps = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.yesPowerBps = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.noPowerBps = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.abstainPowerBps = longToNumber(reader.uint64());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.yesRatioBps = longToNumber(reader.uint64());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.passThresholdBps = longToNumber(reader.uint64());
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.totalBallots = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProposalTally {
    return {
      proposalId: isSet(object.proposalId) ? globalThis.Number(object.proposalId) : 0,
      status: isSet(object.status) ? proposalStatusFromJSON(object.status) : 0,
      turnoutBps: isSet(object.turnoutBps) ? globalThis.Number(object.turnoutBps) : 0,
      quorumBps: isSet(object.quorumBps) ? globalThis.Number(object.quorumBps) : 0,
      yesPowerBps: isSet(object.yesPowerBps) ? globalThis.Number(object.yesPowerBps) : 0,
      noPowerBps: isSet(object.noPowerBps) ? globalThis.Number(object.noPowerBps) : 0,
      abstainPowerBps: isSet(object.abstainPowerBps) ? globalThis.Number(object.abstainPowerBps) : 0,
      yesRatioBps: isSet(object.yesRatioBps) ? globalThis.Number(object.yesRatioBps) : 0,
      passThresholdBps: isSet(object.passThresholdBps) ? globalThis.Number(object.passThresholdBps) : 0,
      totalBallots: isSet(object.totalBallots) ? globalThis.Number(object.totalBallots) : 0,
    };
  },

  toJSON(message: ProposalTally): unknown {
    const obj: any = {};
    if (message.proposalId !== 0) {
      obj.proposalId = Math.round(message.proposalId);
    }
    if (message.status !== 0) {
      obj.status = proposalStatusToJSON(message.status);
    }
    if (message.turnoutBps !== 0) {
      obj.turnoutBps = Math.round(message.turnoutBps);
    }
    if (message.quorumBps !== 0) {
      obj.quorumBps = Math.round(message.quorumBps);
    }
    if (message.yesPowerBps !== 0) {
      obj.yesPowerBps = Math.round(message.yesPowerBps);
    }
    if (message.noPowerBps !== 0) {
      obj.noPowerBps = Math.round(message.noPowerBps);
    }
    if (message.abstainPowerBps !== 0) {
      obj.abstainPowerBps = Math.round(message.abstainPowerBps);
    }
    if (message.yesRatioBps !== 0) {
      obj.yesRatioBps = Math.round(message.yesRatioBps);
    }
    if (message.passThresholdBps !== 0) {
      obj.passThresholdBps = Math.round(message.passThresholdBps);
    }
    if (message.totalBallots !== 0) {
      obj.totalBallots = Math.round(message.totalBallots);
    }
    return obj;
  },

  create(base?: DeepPartial<ProposalTally>): ProposalTally {
    return ProposalTally.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProposalTally>): ProposalTally {
    const message = createBaseProposalTally();
    message.proposalId = object.proposalId ?? 0;
    message.status = object.status ?? 0;
    message.turnoutBps = object.turnoutBps ?? 0;
    message.quorumBps = object.quorumBps ?? 0;
    message.yesPowerBps = object.yesPowerBps ?? 0;
    message.noPowerBps = object.noPowerBps ?? 0;
    message.abstainPowerBps = object.abstainPowerBps ?? 0;
    message.yesRatioBps = object.yesRatioBps ?? 0;
    message.passThresholdBps = object.passThresholdBps ?? 0;
    message.totalBallots = object.totalBallots ?? 0;
    return message;
  },
};

function createBaseGetProposalRequest(): GetProposalRequest {
  return { id: 0 };
}

export const GetProposalRequest: MessageFns<GetProposalRequest> = {
  encode(message: GetProposalRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProposalRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProposalRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProposalRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: GetProposalRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create(base?: DeepPartial<GetProposalRequest>): GetProposalRequest {
    return GetProposalRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetProposalRequest>): GetProposalRequest {
    const message = createBaseGetProposalRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseGetProposalResponse(): GetProposalResponse {
  return { proposal: undefined };
}

export const GetProposalResponse: MessageFns<GetProposalResponse> = {
  encode(message: GetProposalResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.proposal !== undefined) {
      Proposal.encode(message.proposal, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetProposalResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetProposalResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.proposal = Proposal.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetProposalResponse {
    return { proposal: isSet(object.proposal) ? Proposal.fromJSON(object.proposal) : undefined };
  },

  toJSON(message: GetProposalResponse): unknown {
    const obj: any = {};
    if (message.proposal !== undefined) {
      obj.proposal = Proposal.toJSON(message.proposal);
    }
    return obj;
  },

  create(base?: DeepPartial<GetProposalResponse>): GetProposalResponse {
    return GetProposalResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetProposalResponse>): GetProposalResponse {
    const message = createBaseGetProposalResponse();
    message.proposal = (object.proposal !== undefined && object.proposal !== null)
      ? Proposal.fromPartial(object.proposal)
      : undefined;
    return message;
  },
};

function createBaseListProposalsRequest(): ListProposalsRequest {
  return { pageSize: 0, pageToken: "", statusFilter: 0 };
}

export const ListProposalsRequest: MessageFns<ListProposalsRequest> = {
  encode(message: ListProposalsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.pageSize !== 0) {
      writer.uint32(8).uint32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    if (message.statusFilter !== 0) {
      writer.uint32(24).int32(message.statusFilter);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProposalsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProposalsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.pageSize = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.statusFilter = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProposalsRequest {
    return {
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      statusFilter: isSet(object.statusFilter) ? proposalStatusFromJSON(object.statusFilter) : 0,
    };
  },

  toJSON(message: ListProposalsRequest): unknown {
    const obj: any = {};
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.statusFilter !== 0) {
      obj.statusFilter = proposalStatusToJSON(message.statusFilter);
    }
    return obj;
  },

  create(base?: DeepPartial<ListProposalsRequest>): ListProposalsRequest {
    return ListProposalsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProposalsRequest>): ListProposalsRequest {
    const message = createBaseListProposalsRequest();
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.statusFilter = object.statusFilter ?? 0;
    return message;
  },
};

function createBaseListProposalsResponse(): ListProposalsResponse {
  return { proposals: [], nextPageToken: "" };
}

export const ListProposalsResponse: MessageFns<ListProposalsResponse> = {
  encode(message: ListProposalsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.proposals) {
      Proposal.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListProposalsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListProposalsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.proposals.push(Proposal.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListProposalsResponse {
    return {
      proposals: globalThis.Array.isArray(object?.proposals)
        ? object.proposals.map((e: any) => Proposal.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListProposalsResponse): unknown {
    const obj: any = {};
    if (message.proposals?.length) {
      obj.proposals = message.proposals.map((e) => Proposal.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListProposalsResponse>): ListProposalsResponse {
    return ListProposalsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListProposalsResponse>): ListProposalsResponse {
    const message = createBaseListProposalsResponse();
    message.proposals = object.proposals?.map((e) => Proposal.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseGetTallyRequest(): GetTallyRequest {
  return { id: 0 };
}

export const GetTallyRequest: MessageFns<GetTallyRequest> = {
  encode(message: GetTallyRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTallyRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTallyRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTallyRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: GetTallyRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create(base?: DeepPartial<GetTallyRequest>): GetTallyRequest {
    return GetTallyRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTallyRequest>): GetTallyRequest {
    const message = createBaseGetTallyRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseGetTallyResponse(): GetTallyResponse {
  return { tally: undefined };
}

export const GetTallyResponse: MessageFns<GetTallyResponse> = {
  encode(message: GetTallyResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tally !== undefined) {
      ProposalTally.encode(message.tally, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTallyResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTallyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tally = ProposalTally.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTallyResponse {
    return { tally: isSet(object.tally) ? ProposalTally.fromJSON(object.tally) : undefined };
  },

  toJSON(message: GetTallyResponse): unknown {
    const obj: any = {};
    if (message.tally !== undefined) {
      obj.tally = ProposalTally.toJSON(message.tally);
    }
    return obj;
  },

  create(base?: DeepPartial<GetTallyResponse>): GetTallyResponse {
    return GetTallyResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetTallyResponse>): GetTallyResponse {
    const message = createBaseGetTallyResponse();
    message.tally = (object.tally !== undefined && object.tally !== null)
      ? ProposalTally.fromPartial(object.tally)
      : undefined;
    return message;
  },
};

export type QueryService = typeof QueryService;
export const QueryService = {
  getProposal: {
    path: "/gov.v1.Query/GetProposal",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetProposalRequest): Buffer => Buffer.from(GetProposalRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetProposalRequest => GetProposalRequest.decode(value),
    responseSerialize: (value: GetProposalResponse): Buffer => Buffer.from(GetProposalResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetProposalResponse => GetProposalResponse.decode(value),
  },
  listProposals: {
    path: "/gov.v1.Query/ListProposals",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListProposalsRequest): Buffer => Buffer.from(ListProposalsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): ListProposalsRequest => ListProposalsRequest.decode(value),
    responseSerialize: (value: ListProposalsResponse): Buffer =>
      Buffer.from(ListProposalsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): ListProposalsResponse => ListProposalsResponse.decode(value),
  },
  getTally: {
    path: "/gov.v1.Query/GetTally",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetTallyRequest): Buffer => Buffer.from(GetTallyRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): GetTallyRequest => GetTallyRequest.decode(value),
    responseSerialize: (value: GetTallyResponse): Buffer => Buffer.from(GetTallyResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): GetTallyResponse => GetTallyResponse.decode(value),
  },
} as const;

export interface QueryServer extends UntypedServiceImplementation {
  getProposal: handleUnaryCall<GetProposalRequest, GetProposalResponse>;
  listProposals: handleUnaryCall<ListProposalsRequest, ListProposalsResponse>;
  getTally: handleUnaryCall<GetTallyRequest, GetTallyResponse>;
}

export interface QueryClient extends Client {
  getProposal(
    request: GetProposalRequest,
    callback: (error: ServiceError | null, response: GetProposalResponse) => void,
  ): ClientUnaryCall;
  getProposal(
    request: GetProposalRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetProposalResponse) => void,
  ): ClientUnaryCall;
  getProposal(
    request: GetProposalRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetProposalResponse) => void,
  ): ClientUnaryCall;
  listProposals(
    request: ListProposalsRequest,
    callback: (error: ServiceError | null, response: ListProposalsResponse) => void,
  ): ClientUnaryCall;
  listProposals(
    request: ListProposalsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListProposalsResponse) => void,
  ): ClientUnaryCall;
  listProposals(
    request: ListProposalsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListProposalsResponse) => void,
  ): ClientUnaryCall;
  getTally(
    request: GetTallyRequest,
    callback: (error: ServiceError | null, response: GetTallyResponse) => void,
  ): ClientUnaryCall;
  getTally(
    request: GetTallyRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetTallyResponse) => void,
  ): ClientUnaryCall;
  getTally(
    request: GetTallyRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetTallyResponse) => void,
  ): ClientUnaryCall;
}

export const QueryClient = makeGenericClientConstructor(QueryService, "gov.v1.Query") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): QueryClient;
  service: typeof QueryService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
