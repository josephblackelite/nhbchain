// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: fees/v1/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "nhb.fees.v1";

/** FeeApplied captures telemetry for a fee assessment. */
export interface FeeApplied {
  payer: Buffer;
  domain: string;
  grossWei: string;
  feeWei: string;
  netWei: string;
  policyVersion: number;
  ownerWallet: Buffer;
  freeTierApplied: boolean;
  freeTierLimit: number;
  freeTierRemaining: number;
  usageCount: number;
  windowStartUnix: number;
  feeBps: number;
}

function createBaseFeeApplied(): FeeApplied {
  return {
    payer: Buffer.alloc(0),
    domain: "",
    grossWei: "",
    feeWei: "",
    netWei: "",
    policyVersion: 0,
    ownerWallet: Buffer.alloc(0),
    freeTierApplied: false,
    freeTierLimit: 0,
    freeTierRemaining: 0,
    usageCount: 0,
    windowStartUnix: 0,
    feeBps: 0,
  };
}

export const FeeApplied: MessageFns<FeeApplied> = {
  encode(message: FeeApplied, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.payer.length !== 0) {
      writer.uint32(10).bytes(message.payer);
    }
    if (message.domain !== "") {
      writer.uint32(18).string(message.domain);
    }
    if (message.grossWei !== "") {
      writer.uint32(26).string(message.grossWei);
    }
    if (message.feeWei !== "") {
      writer.uint32(34).string(message.feeWei);
    }
    if (message.netWei !== "") {
      writer.uint32(42).string(message.netWei);
    }
    if (message.policyVersion !== 0) {
      writer.uint32(48).uint64(message.policyVersion);
    }
    if (message.ownerWallet.length !== 0) {
      writer.uint32(58).bytes(message.ownerWallet);
    }
    if (message.freeTierApplied === true) {
      writer.uint32(64).bool(message.freeTierApplied);
    }
    if (message.freeTierLimit !== 0) {
      writer.uint32(72).uint64(message.freeTierLimit);
    }
    if (message.freeTierRemaining !== 0) {
      writer.uint32(80).uint64(message.freeTierRemaining);
    }
    if (message.usageCount !== 0) {
      writer.uint32(88).uint64(message.usageCount);
    }
    if (message.windowStartUnix !== 0) {
      writer.uint32(96).int64(message.windowStartUnix);
    }
    if (message.feeBps !== 0) {
      writer.uint32(104).uint32(message.feeBps);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeeApplied {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeeApplied();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.payer = Buffer.from(reader.bytes());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.domain = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.grossWei = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.feeWei = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.netWei = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.policyVersion = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.ownerWallet = Buffer.from(reader.bytes());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.freeTierApplied = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.freeTierLimit = longToNumber(reader.uint64());
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.freeTierRemaining = longToNumber(reader.uint64());
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.usageCount = longToNumber(reader.uint64());
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.windowStartUnix = longToNumber(reader.int64());
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.feeBps = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FeeApplied {
    return {
      payer: isSet(object.payer) ? Buffer.from(bytesFromBase64(object.payer)) : Buffer.alloc(0),
      domain: isSet(object.domain) ? globalThis.String(object.domain) : "",
      grossWei: isSet(object.grossWei) ? globalThis.String(object.grossWei) : "",
      feeWei: isSet(object.feeWei) ? globalThis.String(object.feeWei) : "",
      netWei: isSet(object.netWei) ? globalThis.String(object.netWei) : "",
      policyVersion: isSet(object.policyVersion) ? globalThis.Number(object.policyVersion) : 0,
      ownerWallet: isSet(object.ownerWallet) ? Buffer.from(bytesFromBase64(object.ownerWallet)) : Buffer.alloc(0),
      freeTierApplied: isSet(object.freeTierApplied) ? globalThis.Boolean(object.freeTierApplied) : false,
      freeTierLimit: isSet(object.freeTierLimit) ? globalThis.Number(object.freeTierLimit) : 0,
      freeTierRemaining: isSet(object.freeTierRemaining) ? globalThis.Number(object.freeTierRemaining) : 0,
      usageCount: isSet(object.usageCount) ? globalThis.Number(object.usageCount) : 0,
      windowStartUnix: isSet(object.windowStartUnix) ? globalThis.Number(object.windowStartUnix) : 0,
      feeBps: isSet(object.feeBps) ? globalThis.Number(object.feeBps) : 0,
    };
  },

  toJSON(message: FeeApplied): unknown {
    const obj: any = {};
    if (message.payer.length !== 0) {
      obj.payer = base64FromBytes(message.payer);
    }
    if (message.domain !== "") {
      obj.domain = message.domain;
    }
    if (message.grossWei !== "") {
      obj.grossWei = message.grossWei;
    }
    if (message.feeWei !== "") {
      obj.feeWei = message.feeWei;
    }
    if (message.netWei !== "") {
      obj.netWei = message.netWei;
    }
    if (message.policyVersion !== 0) {
      obj.policyVersion = Math.round(message.policyVersion);
    }
    if (message.ownerWallet.length !== 0) {
      obj.ownerWallet = base64FromBytes(message.ownerWallet);
    }
    if (message.freeTierApplied === true) {
      obj.freeTierApplied = message.freeTierApplied;
    }
    if (message.freeTierLimit !== 0) {
      obj.freeTierLimit = Math.round(message.freeTierLimit);
    }
    if (message.freeTierRemaining !== 0) {
      obj.freeTierRemaining = Math.round(message.freeTierRemaining);
    }
    if (message.usageCount !== 0) {
      obj.usageCount = Math.round(message.usageCount);
    }
    if (message.windowStartUnix !== 0) {
      obj.windowStartUnix = Math.round(message.windowStartUnix);
    }
    if (message.feeBps !== 0) {
      obj.feeBps = Math.round(message.feeBps);
    }
    return obj;
  },

  create(base?: DeepPartial<FeeApplied>): FeeApplied {
    return FeeApplied.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FeeApplied>): FeeApplied {
    const message = createBaseFeeApplied();
    message.payer = object.payer ?? Buffer.alloc(0);
    message.domain = object.domain ?? "";
    message.grossWei = object.grossWei ?? "";
    message.feeWei = object.feeWei ?? "";
    message.netWei = object.netWei ?? "";
    message.policyVersion = object.policyVersion ?? 0;
    message.ownerWallet = object.ownerWallet ?? Buffer.alloc(0);
    message.freeTierApplied = object.freeTierApplied ?? false;
    message.freeTierLimit = object.freeTierLimit ?? 0;
    message.freeTierRemaining = object.freeTierRemaining ?? 0;
    message.usageCount = object.usageCount ?? 0;
    message.windowStartUnix = object.windowStartUnix ?? 0;
    message.feeBps = object.feeBps ?? 0;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
