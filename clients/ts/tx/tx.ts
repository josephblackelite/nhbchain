// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: tx/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "tx.v1";

/**
 * RefundThreadRequest requests the refund linkage for a given origin
 * transaction hash. The hash must be provided as a hex string (with or without
 * the 0x prefix).
 */
export interface RefundThreadRequest {
  originTx: string;
}

/**
 * RefundThreadLink captures an individual refund entry that references the
 * origin transaction. Amounts are string encoded to avoid precision loss when
 * consumed by JSON/TS clients.
 */
export interface RefundThreadLink {
  refundTx: string;
  amount: string;
  timestamp: number;
}

/**
 * RefundThreadResponse returns the aggregated refund ledger for the supplied
 * origin transaction hash.
 */
export interface RefundThreadResponse {
  originTx: string;
  originAmount: string;
  cumulativeRefunded: string;
  originTimestamp: number;
  refunds: RefundThreadLink[];
}

function createBaseRefundThreadRequest(): RefundThreadRequest {
  return { originTx: "" };
}

export const RefundThreadRequest: MessageFns<RefundThreadRequest> = {
  encode(message: RefundThreadRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.originTx !== "") {
      writer.uint32(10).string(message.originTx);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RefundThreadRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRefundThreadRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.originTx = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RefundThreadRequest {
    return { originTx: isSet(object.originTx) ? globalThis.String(object.originTx) : "" };
  },

  toJSON(message: RefundThreadRequest): unknown {
    const obj: any = {};
    if (message.originTx !== "") {
      obj.originTx = message.originTx;
    }
    return obj;
  },

  create(base?: DeepPartial<RefundThreadRequest>): RefundThreadRequest {
    return RefundThreadRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RefundThreadRequest>): RefundThreadRequest {
    const message = createBaseRefundThreadRequest();
    message.originTx = object.originTx ?? "";
    return message;
  },
};

function createBaseRefundThreadLink(): RefundThreadLink {
  return { refundTx: "", amount: "", timestamp: 0 };
}

export const RefundThreadLink: MessageFns<RefundThreadLink> = {
  encode(message: RefundThreadLink, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.refundTx !== "") {
      writer.uint32(10).string(message.refundTx);
    }
    if (message.amount !== "") {
      writer.uint32(18).string(message.amount);
    }
    if (message.timestamp !== 0) {
      writer.uint32(24).uint64(message.timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RefundThreadLink {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRefundThreadLink();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.refundTx = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.amount = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.timestamp = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RefundThreadLink {
    return {
      refundTx: isSet(object.refundTx) ? globalThis.String(object.refundTx) : "",
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
    };
  },

  toJSON(message: RefundThreadLink): unknown {
    const obj: any = {};
    if (message.refundTx !== "") {
      obj.refundTx = message.refundTx;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    return obj;
  },

  create(base?: DeepPartial<RefundThreadLink>): RefundThreadLink {
    return RefundThreadLink.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RefundThreadLink>): RefundThreadLink {
    const message = createBaseRefundThreadLink();
    message.refundTx = object.refundTx ?? "";
    message.amount = object.amount ?? "";
    message.timestamp = object.timestamp ?? 0;
    return message;
  },
};

function createBaseRefundThreadResponse(): RefundThreadResponse {
  return { originTx: "", originAmount: "", cumulativeRefunded: "", originTimestamp: 0, refunds: [] };
}

export const RefundThreadResponse: MessageFns<RefundThreadResponse> = {
  encode(message: RefundThreadResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.originTx !== "") {
      writer.uint32(10).string(message.originTx);
    }
    if (message.originAmount !== "") {
      writer.uint32(18).string(message.originAmount);
    }
    if (message.cumulativeRefunded !== "") {
      writer.uint32(26).string(message.cumulativeRefunded);
    }
    if (message.originTimestamp !== 0) {
      writer.uint32(32).uint64(message.originTimestamp);
    }
    for (const v of message.refunds) {
      RefundThreadLink.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RefundThreadResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRefundThreadResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.originTx = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.originAmount = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.cumulativeRefunded = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.originTimestamp = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.refunds.push(RefundThreadLink.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RefundThreadResponse {
    return {
      originTx: isSet(object.originTx) ? globalThis.String(object.originTx) : "",
      originAmount: isSet(object.originAmount) ? globalThis.String(object.originAmount) : "",
      cumulativeRefunded: isSet(object.cumulativeRefunded) ? globalThis.String(object.cumulativeRefunded) : "",
      originTimestamp: isSet(object.originTimestamp) ? globalThis.Number(object.originTimestamp) : 0,
      refunds: globalThis.Array.isArray(object?.refunds)
        ? object.refunds.map((e: any) => RefundThreadLink.fromJSON(e))
        : [],
    };
  },

  toJSON(message: RefundThreadResponse): unknown {
    const obj: any = {};
    if (message.originTx !== "") {
      obj.originTx = message.originTx;
    }
    if (message.originAmount !== "") {
      obj.originAmount = message.originAmount;
    }
    if (message.cumulativeRefunded !== "") {
      obj.cumulativeRefunded = message.cumulativeRefunded;
    }
    if (message.originTimestamp !== 0) {
      obj.originTimestamp = Math.round(message.originTimestamp);
    }
    if (message.refunds?.length) {
      obj.refunds = message.refunds.map((e) => RefundThreadLink.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<RefundThreadResponse>): RefundThreadResponse {
    return RefundThreadResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RefundThreadResponse>): RefundThreadResponse {
    const message = createBaseRefundThreadResponse();
    message.originTx = object.originTx ?? "";
    message.originAmount = object.originAmount ?? "";
    message.cumulativeRefunded = object.cumulativeRefunded ?? "";
    message.originTimestamp = object.originTimestamp ?? 0;
    message.refunds = object.refunds?.map((e) => RefundThreadLink.fromPartial(e)) || [];
    return message;
  },
};

/** Query exposes read-only methods for inspecting transaction refund metadata. */
export type QueryService = typeof QueryService;
export const QueryService = {
  refundThread: {
    path: "/tx.v1.Query/RefundThread",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: RefundThreadRequest): Buffer => Buffer.from(RefundThreadRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): RefundThreadRequest => RefundThreadRequest.decode(value),
    responseSerialize: (value: RefundThreadResponse): Buffer =>
      Buffer.from(RefundThreadResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): RefundThreadResponse => RefundThreadResponse.decode(value),
  },
} as const;

export interface QueryServer extends UntypedServiceImplementation {
  refundThread: handleUnaryCall<RefundThreadRequest, RefundThreadResponse>;
}

export interface QueryClient extends Client {
  refundThread(
    request: RefundThreadRequest,
    callback: (error: ServiceError | null, response: RefundThreadResponse) => void,
  ): ClientUnaryCall;
  refundThread(
    request: RefundThreadRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: RefundThreadResponse) => void,
  ): ClientUnaryCall;
  refundThread(
    request: RefundThreadRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: RefundThreadResponse) => void,
  ): ClientUnaryCall;
}

export const QueryClient = makeGenericClientConstructor(QueryService, "tx.v1.Query") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): QueryClient;
  service: typeof QueryService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
