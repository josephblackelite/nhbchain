// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: pos/registry.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "pos.v1";

export interface Merchant {
  address: string;
  paused: boolean;
}

export interface Device {
  deviceId: string;
  merchantAddr: string;
  revoked: boolean;
}

export interface MsgRegisterMerchant {
  authority: string;
  merchantAddr: string;
}

export interface MsgRegisterMerchantResponse {
  txHash: string;
}

export interface MsgRegisterDevice {
  authority: string;
  merchantAddr: string;
  deviceId: string;
}

export interface MsgRegisterDeviceResponse {
  txHash: string;
}

export interface MsgPauseMerchant {
  authority: string;
  merchantAddr: string;
}

export interface MsgPauseMerchantResponse {
  txHash: string;
}

export interface MsgResumeMerchant {
  authority: string;
  merchantAddr: string;
}

export interface MsgResumeMerchantResponse {
  txHash: string;
}

export interface MsgRevokeDevice {
  authority: string;
  merchantAddr: string;
  deviceId: string;
}

export interface MsgRevokeDeviceResponse {
  txHash: string;
}

export interface MsgRestoreDevice {
  authority: string;
  merchantAddr: string;
  deviceId: string;
}

export interface MsgRestoreDeviceResponse {
  txHash: string;
}

function createBaseMerchant(): Merchant {
  return { address: "", paused: false };
}

export const Merchant: MessageFns<Merchant> = {
  encode(message: Merchant, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    if (message.paused !== false) {
      writer.uint32(16).bool(message.paused);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Merchant {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMerchant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.paused = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Merchant {
    return {
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      paused: isSet(object.paused) ? globalThis.Boolean(object.paused) : false,
    };
  },

  toJSON(message: Merchant): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.paused !== false) {
      obj.paused = message.paused;
    }
    return obj;
  },

  create(base?: DeepPartial<Merchant>): Merchant {
    return Merchant.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Merchant>): Merchant {
    const message = createBaseMerchant();
    message.address = object.address ?? "";
    message.paused = object.paused ?? false;
    return message;
  },
};

function createBaseDevice(): Device {
  return { deviceId: "", merchantAddr: "", revoked: false };
}

export const Device: MessageFns<Device> = {
  encode(message: Device, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deviceId !== "") {
      writer.uint32(10).string(message.deviceId);
    }
    if (message.merchantAddr !== "") {
      writer.uint32(18).string(message.merchantAddr);
    }
    if (message.revoked !== false) {
      writer.uint32(24).bool(message.revoked);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Device {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDevice();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.deviceId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.merchantAddr = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.revoked = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Device {
    return {
      deviceId: isSet(object.deviceId) ? globalThis.String(object.deviceId) : "",
      merchantAddr: isSet(object.merchantAddr) ? globalThis.String(object.merchantAddr) : "",
      revoked: isSet(object.revoked) ? globalThis.Boolean(object.revoked) : false,
    };
  },

  toJSON(message: Device): unknown {
    const obj: any = {};
    if (message.deviceId !== "") {
      obj.deviceId = message.deviceId;
    }
    if (message.merchantAddr !== "") {
      obj.merchantAddr = message.merchantAddr;
    }
    if (message.revoked !== false) {
      obj.revoked = message.revoked;
    }
    return obj;
  },

  create(base?: DeepPartial<Device>): Device {
    return Device.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Device>): Device {
    const message = createBaseDevice();
    message.deviceId = object.deviceId ?? "";
    message.merchantAddr = object.merchantAddr ?? "";
    message.revoked = object.revoked ?? false;
    return message;
  },
};

function createBaseMsgRegisterMerchant(): MsgRegisterMerchant {
  return { authority: "", merchantAddr: "" };
}

export const MsgRegisterMerchant: MessageFns<MsgRegisterMerchant> = {
  encode(message: MsgRegisterMerchant, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.merchantAddr !== "") {
      writer.uint32(18).string(message.merchantAddr);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRegisterMerchant {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRegisterMerchant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.merchantAddr = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRegisterMerchant {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      merchantAddr: isSet(object.merchantAddr) ? globalThis.String(object.merchantAddr) : "",
    };
  },

  toJSON(message: MsgRegisterMerchant): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.merchantAddr !== "") {
      obj.merchantAddr = message.merchantAddr;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgRegisterMerchant>): MsgRegisterMerchant {
    return MsgRegisterMerchant.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgRegisterMerchant>): MsgRegisterMerchant {
    const message = createBaseMsgRegisterMerchant();
    message.authority = object.authority ?? "";
    message.merchantAddr = object.merchantAddr ?? "";
    return message;
  },
};

function createBaseMsgRegisterMerchantResponse(): MsgRegisterMerchantResponse {
  return { txHash: "" };
}

export const MsgRegisterMerchantResponse: MessageFns<MsgRegisterMerchantResponse> = {
  encode(message: MsgRegisterMerchantResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.txHash !== "") {
      writer.uint32(10).string(message.txHash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRegisterMerchantResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRegisterMerchantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.txHash = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRegisterMerchantResponse {
    return { txHash: isSet(object.txHash) ? globalThis.String(object.txHash) : "" };
  },

  toJSON(message: MsgRegisterMerchantResponse): unknown {
    const obj: any = {};
    if (message.txHash !== "") {
      obj.txHash = message.txHash;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgRegisterMerchantResponse>): MsgRegisterMerchantResponse {
    return MsgRegisterMerchantResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgRegisterMerchantResponse>): MsgRegisterMerchantResponse {
    const message = createBaseMsgRegisterMerchantResponse();
    message.txHash = object.txHash ?? "";
    return message;
  },
};

function createBaseMsgRegisterDevice(): MsgRegisterDevice {
  return { authority: "", merchantAddr: "", deviceId: "" };
}

export const MsgRegisterDevice: MessageFns<MsgRegisterDevice> = {
  encode(message: MsgRegisterDevice, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.merchantAddr !== "") {
      writer.uint32(18).string(message.merchantAddr);
    }
    if (message.deviceId !== "") {
      writer.uint32(26).string(message.deviceId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRegisterDevice {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRegisterDevice();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.merchantAddr = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.deviceId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRegisterDevice {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      merchantAddr: isSet(object.merchantAddr) ? globalThis.String(object.merchantAddr) : "",
      deviceId: isSet(object.deviceId) ? globalThis.String(object.deviceId) : "",
    };
  },

  toJSON(message: MsgRegisterDevice): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.merchantAddr !== "") {
      obj.merchantAddr = message.merchantAddr;
    }
    if (message.deviceId !== "") {
      obj.deviceId = message.deviceId;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgRegisterDevice>): MsgRegisterDevice {
    return MsgRegisterDevice.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgRegisterDevice>): MsgRegisterDevice {
    const message = createBaseMsgRegisterDevice();
    message.authority = object.authority ?? "";
    message.merchantAddr = object.merchantAddr ?? "";
    message.deviceId = object.deviceId ?? "";
    return message;
  },
};

function createBaseMsgRegisterDeviceResponse(): MsgRegisterDeviceResponse {
  return { txHash: "" };
}

export const MsgRegisterDeviceResponse: MessageFns<MsgRegisterDeviceResponse> = {
  encode(message: MsgRegisterDeviceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.txHash !== "") {
      writer.uint32(10).string(message.txHash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRegisterDeviceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRegisterDeviceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.txHash = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRegisterDeviceResponse {
    return { txHash: isSet(object.txHash) ? globalThis.String(object.txHash) : "" };
  },

  toJSON(message: MsgRegisterDeviceResponse): unknown {
    const obj: any = {};
    if (message.txHash !== "") {
      obj.txHash = message.txHash;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgRegisterDeviceResponse>): MsgRegisterDeviceResponse {
    return MsgRegisterDeviceResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgRegisterDeviceResponse>): MsgRegisterDeviceResponse {
    const message = createBaseMsgRegisterDeviceResponse();
    message.txHash = object.txHash ?? "";
    return message;
  },
};

function createBaseMsgPauseMerchant(): MsgPauseMerchant {
  return { authority: "", merchantAddr: "" };
}

export const MsgPauseMerchant: MessageFns<MsgPauseMerchant> = {
  encode(message: MsgPauseMerchant, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.merchantAddr !== "") {
      writer.uint32(18).string(message.merchantAddr);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgPauseMerchant {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgPauseMerchant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.merchantAddr = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgPauseMerchant {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      merchantAddr: isSet(object.merchantAddr) ? globalThis.String(object.merchantAddr) : "",
    };
  },

  toJSON(message: MsgPauseMerchant): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.merchantAddr !== "") {
      obj.merchantAddr = message.merchantAddr;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgPauseMerchant>): MsgPauseMerchant {
    return MsgPauseMerchant.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgPauseMerchant>): MsgPauseMerchant {
    const message = createBaseMsgPauseMerchant();
    message.authority = object.authority ?? "";
    message.merchantAddr = object.merchantAddr ?? "";
    return message;
  },
};

function createBaseMsgPauseMerchantResponse(): MsgPauseMerchantResponse {
  return { txHash: "" };
}

export const MsgPauseMerchantResponse: MessageFns<MsgPauseMerchantResponse> = {
  encode(message: MsgPauseMerchantResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.txHash !== "") {
      writer.uint32(10).string(message.txHash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgPauseMerchantResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgPauseMerchantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.txHash = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgPauseMerchantResponse {
    return { txHash: isSet(object.txHash) ? globalThis.String(object.txHash) : "" };
  },

  toJSON(message: MsgPauseMerchantResponse): unknown {
    const obj: any = {};
    if (message.txHash !== "") {
      obj.txHash = message.txHash;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgPauseMerchantResponse>): MsgPauseMerchantResponse {
    return MsgPauseMerchantResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgPauseMerchantResponse>): MsgPauseMerchantResponse {
    const message = createBaseMsgPauseMerchantResponse();
    message.txHash = object.txHash ?? "";
    return message;
  },
};

function createBaseMsgResumeMerchant(): MsgResumeMerchant {
  return { authority: "", merchantAddr: "" };
}

export const MsgResumeMerchant: MessageFns<MsgResumeMerchant> = {
  encode(message: MsgResumeMerchant, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.merchantAddr !== "") {
      writer.uint32(18).string(message.merchantAddr);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgResumeMerchant {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgResumeMerchant();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.merchantAddr = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgResumeMerchant {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      merchantAddr: isSet(object.merchantAddr) ? globalThis.String(object.merchantAddr) : "",
    };
  },

  toJSON(message: MsgResumeMerchant): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.merchantAddr !== "") {
      obj.merchantAddr = message.merchantAddr;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgResumeMerchant>): MsgResumeMerchant {
    return MsgResumeMerchant.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgResumeMerchant>): MsgResumeMerchant {
    const message = createBaseMsgResumeMerchant();
    message.authority = object.authority ?? "";
    message.merchantAddr = object.merchantAddr ?? "";
    return message;
  },
};

function createBaseMsgResumeMerchantResponse(): MsgResumeMerchantResponse {
  return { txHash: "" };
}

export const MsgResumeMerchantResponse: MessageFns<MsgResumeMerchantResponse> = {
  encode(message: MsgResumeMerchantResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.txHash !== "") {
      writer.uint32(10).string(message.txHash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgResumeMerchantResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgResumeMerchantResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.txHash = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgResumeMerchantResponse {
    return { txHash: isSet(object.txHash) ? globalThis.String(object.txHash) : "" };
  },

  toJSON(message: MsgResumeMerchantResponse): unknown {
    const obj: any = {};
    if (message.txHash !== "") {
      obj.txHash = message.txHash;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgResumeMerchantResponse>): MsgResumeMerchantResponse {
    return MsgResumeMerchantResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgResumeMerchantResponse>): MsgResumeMerchantResponse {
    const message = createBaseMsgResumeMerchantResponse();
    message.txHash = object.txHash ?? "";
    return message;
  },
};

function createBaseMsgRevokeDevice(): MsgRevokeDevice {
  return { authority: "", merchantAddr: "", deviceId: "" };
}

export const MsgRevokeDevice: MessageFns<MsgRevokeDevice> = {
  encode(message: MsgRevokeDevice, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.merchantAddr !== "") {
      writer.uint32(18).string(message.merchantAddr);
    }
    if (message.deviceId !== "") {
      writer.uint32(26).string(message.deviceId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRevokeDevice {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRevokeDevice();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.merchantAddr = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.deviceId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRevokeDevice {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      merchantAddr: isSet(object.merchantAddr) ? globalThis.String(object.merchantAddr) : "",
      deviceId: isSet(object.deviceId) ? globalThis.String(object.deviceId) : "",
    };
  },

  toJSON(message: MsgRevokeDevice): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.merchantAddr !== "") {
      obj.merchantAddr = message.merchantAddr;
    }
    if (message.deviceId !== "") {
      obj.deviceId = message.deviceId;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgRevokeDevice>): MsgRevokeDevice {
    return MsgRevokeDevice.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgRevokeDevice>): MsgRevokeDevice {
    const message = createBaseMsgRevokeDevice();
    message.authority = object.authority ?? "";
    message.merchantAddr = object.merchantAddr ?? "";
    message.deviceId = object.deviceId ?? "";
    return message;
  },
};

function createBaseMsgRevokeDeviceResponse(): MsgRevokeDeviceResponse {
  return { txHash: "" };
}

export const MsgRevokeDeviceResponse: MessageFns<MsgRevokeDeviceResponse> = {
  encode(message: MsgRevokeDeviceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.txHash !== "") {
      writer.uint32(10).string(message.txHash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRevokeDeviceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRevokeDeviceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.txHash = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRevokeDeviceResponse {
    return { txHash: isSet(object.txHash) ? globalThis.String(object.txHash) : "" };
  },

  toJSON(message: MsgRevokeDeviceResponse): unknown {
    const obj: any = {};
    if (message.txHash !== "") {
      obj.txHash = message.txHash;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgRevokeDeviceResponse>): MsgRevokeDeviceResponse {
    return MsgRevokeDeviceResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgRevokeDeviceResponse>): MsgRevokeDeviceResponse {
    const message = createBaseMsgRevokeDeviceResponse();
    message.txHash = object.txHash ?? "";
    return message;
  },
};

function createBaseMsgRestoreDevice(): MsgRestoreDevice {
  return { authority: "", merchantAddr: "", deviceId: "" };
}

export const MsgRestoreDevice: MessageFns<MsgRestoreDevice> = {
  encode(message: MsgRestoreDevice, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.merchantAddr !== "") {
      writer.uint32(18).string(message.merchantAddr);
    }
    if (message.deviceId !== "") {
      writer.uint32(26).string(message.deviceId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRestoreDevice {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRestoreDevice();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.merchantAddr = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.deviceId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRestoreDevice {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      merchantAddr: isSet(object.merchantAddr) ? globalThis.String(object.merchantAddr) : "",
      deviceId: isSet(object.deviceId) ? globalThis.String(object.deviceId) : "",
    };
  },

  toJSON(message: MsgRestoreDevice): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.merchantAddr !== "") {
      obj.merchantAddr = message.merchantAddr;
    }
    if (message.deviceId !== "") {
      obj.deviceId = message.deviceId;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgRestoreDevice>): MsgRestoreDevice {
    return MsgRestoreDevice.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgRestoreDevice>): MsgRestoreDevice {
    const message = createBaseMsgRestoreDevice();
    message.authority = object.authority ?? "";
    message.merchantAddr = object.merchantAddr ?? "";
    message.deviceId = object.deviceId ?? "";
    return message;
  },
};

function createBaseMsgRestoreDeviceResponse(): MsgRestoreDeviceResponse {
  return { txHash: "" };
}

export const MsgRestoreDeviceResponse: MessageFns<MsgRestoreDeviceResponse> = {
  encode(message: MsgRestoreDeviceResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.txHash !== "") {
      writer.uint32(10).string(message.txHash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRestoreDeviceResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRestoreDeviceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.txHash = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRestoreDeviceResponse {
    return { txHash: isSet(object.txHash) ? globalThis.String(object.txHash) : "" };
  },

  toJSON(message: MsgRestoreDeviceResponse): unknown {
    const obj: any = {};
    if (message.txHash !== "") {
      obj.txHash = message.txHash;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgRestoreDeviceResponse>): MsgRestoreDeviceResponse {
    return MsgRestoreDeviceResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgRestoreDeviceResponse>): MsgRestoreDeviceResponse {
    const message = createBaseMsgRestoreDeviceResponse();
    message.txHash = object.txHash ?? "";
    return message;
  },
};

export type RegistryService = typeof RegistryService;
export const RegistryService = {
  registerMerchant: {
    path: "/pos.v1.Registry/RegisterMerchant",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: MsgRegisterMerchant): Buffer => Buffer.from(MsgRegisterMerchant.encode(value).finish()),
    requestDeserialize: (value: Buffer): MsgRegisterMerchant => MsgRegisterMerchant.decode(value),
    responseSerialize: (value: MsgRegisterMerchantResponse): Buffer =>
      Buffer.from(MsgRegisterMerchantResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): MsgRegisterMerchantResponse => MsgRegisterMerchantResponse.decode(value),
  },
  registerDevice: {
    path: "/pos.v1.Registry/RegisterDevice",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: MsgRegisterDevice): Buffer => Buffer.from(MsgRegisterDevice.encode(value).finish()),
    requestDeserialize: (value: Buffer): MsgRegisterDevice => MsgRegisterDevice.decode(value),
    responseSerialize: (value: MsgRegisterDeviceResponse): Buffer =>
      Buffer.from(MsgRegisterDeviceResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): MsgRegisterDeviceResponse => MsgRegisterDeviceResponse.decode(value),
  },
  pauseMerchant: {
    path: "/pos.v1.Registry/PauseMerchant",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: MsgPauseMerchant): Buffer => Buffer.from(MsgPauseMerchant.encode(value).finish()),
    requestDeserialize: (value: Buffer): MsgPauseMerchant => MsgPauseMerchant.decode(value),
    responseSerialize: (value: MsgPauseMerchantResponse): Buffer =>
      Buffer.from(MsgPauseMerchantResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): MsgPauseMerchantResponse => MsgPauseMerchantResponse.decode(value),
  },
  resumeMerchant: {
    path: "/pos.v1.Registry/ResumeMerchant",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: MsgResumeMerchant): Buffer => Buffer.from(MsgResumeMerchant.encode(value).finish()),
    requestDeserialize: (value: Buffer): MsgResumeMerchant => MsgResumeMerchant.decode(value),
    responseSerialize: (value: MsgResumeMerchantResponse): Buffer =>
      Buffer.from(MsgResumeMerchantResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): MsgResumeMerchantResponse => MsgResumeMerchantResponse.decode(value),
  },
  revokeDevice: {
    path: "/pos.v1.Registry/RevokeDevice",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: MsgRevokeDevice): Buffer => Buffer.from(MsgRevokeDevice.encode(value).finish()),
    requestDeserialize: (value: Buffer): MsgRevokeDevice => MsgRevokeDevice.decode(value),
    responseSerialize: (value: MsgRevokeDeviceResponse): Buffer =>
      Buffer.from(MsgRevokeDeviceResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): MsgRevokeDeviceResponse => MsgRevokeDeviceResponse.decode(value),
  },
  restoreDevice: {
    path: "/pos.v1.Registry/RestoreDevice",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: MsgRestoreDevice): Buffer => Buffer.from(MsgRestoreDevice.encode(value).finish()),
    requestDeserialize: (value: Buffer): MsgRestoreDevice => MsgRestoreDevice.decode(value),
    responseSerialize: (value: MsgRestoreDeviceResponse): Buffer =>
      Buffer.from(MsgRestoreDeviceResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): MsgRestoreDeviceResponse => MsgRestoreDeviceResponse.decode(value),
  },
} as const;

export interface RegistryServer extends UntypedServiceImplementation {
  registerMerchant: handleUnaryCall<MsgRegisterMerchant, MsgRegisterMerchantResponse>;
  registerDevice: handleUnaryCall<MsgRegisterDevice, MsgRegisterDeviceResponse>;
  pauseMerchant: handleUnaryCall<MsgPauseMerchant, MsgPauseMerchantResponse>;
  resumeMerchant: handleUnaryCall<MsgResumeMerchant, MsgResumeMerchantResponse>;
  revokeDevice: handleUnaryCall<MsgRevokeDevice, MsgRevokeDeviceResponse>;
  restoreDevice: handleUnaryCall<MsgRestoreDevice, MsgRestoreDeviceResponse>;
}

export interface RegistryClient extends Client {
  registerMerchant(
    request: MsgRegisterMerchant,
    callback: (error: ServiceError | null, response: MsgRegisterMerchantResponse) => void,
  ): ClientUnaryCall;
  registerMerchant(
    request: MsgRegisterMerchant,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: MsgRegisterMerchantResponse) => void,
  ): ClientUnaryCall;
  registerMerchant(
    request: MsgRegisterMerchant,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: MsgRegisterMerchantResponse) => void,
  ): ClientUnaryCall;
  registerDevice(
    request: MsgRegisterDevice,
    callback: (error: ServiceError | null, response: MsgRegisterDeviceResponse) => void,
  ): ClientUnaryCall;
  registerDevice(
    request: MsgRegisterDevice,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: MsgRegisterDeviceResponse) => void,
  ): ClientUnaryCall;
  registerDevice(
    request: MsgRegisterDevice,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: MsgRegisterDeviceResponse) => void,
  ): ClientUnaryCall;
  pauseMerchant(
    request: MsgPauseMerchant,
    callback: (error: ServiceError | null, response: MsgPauseMerchantResponse) => void,
  ): ClientUnaryCall;
  pauseMerchant(
    request: MsgPauseMerchant,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: MsgPauseMerchantResponse) => void,
  ): ClientUnaryCall;
  pauseMerchant(
    request: MsgPauseMerchant,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: MsgPauseMerchantResponse) => void,
  ): ClientUnaryCall;
  resumeMerchant(
    request: MsgResumeMerchant,
    callback: (error: ServiceError | null, response: MsgResumeMerchantResponse) => void,
  ): ClientUnaryCall;
  resumeMerchant(
    request: MsgResumeMerchant,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: MsgResumeMerchantResponse) => void,
  ): ClientUnaryCall;
  resumeMerchant(
    request: MsgResumeMerchant,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: MsgResumeMerchantResponse) => void,
  ): ClientUnaryCall;
  revokeDevice(
    request: MsgRevokeDevice,
    callback: (error: ServiceError | null, response: MsgRevokeDeviceResponse) => void,
  ): ClientUnaryCall;
  revokeDevice(
    request: MsgRevokeDevice,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: MsgRevokeDeviceResponse) => void,
  ): ClientUnaryCall;
  revokeDevice(
    request: MsgRevokeDevice,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: MsgRevokeDeviceResponse) => void,
  ): ClientUnaryCall;
  restoreDevice(
    request: MsgRestoreDevice,
    callback: (error: ServiceError | null, response: MsgRestoreDeviceResponse) => void,
  ): ClientUnaryCall;
  restoreDevice(
    request: MsgRestoreDevice,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: MsgRestoreDeviceResponse) => void,
  ): ClientUnaryCall;
  restoreDevice(
    request: MsgRestoreDevice,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: MsgRestoreDeviceResponse) => void,
  ): ClientUnaryCall;
}

export const RegistryClient = makeGenericClientConstructor(RegistryService, "pos.v1.Registry") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): RegistryClient;
  service: typeof RegistryService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
