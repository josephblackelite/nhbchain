// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: pos/realtime.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientReadableStream,
  type handleServerStreamingCall,
  makeGenericClientConstructor,
  type Metadata,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "pos.v1";

export enum FinalityStatus {
  FINALITY_STATUS_UNSPECIFIED = 0,
  FINALITY_STATUS_PENDING = 1,
  FINALITY_STATUS_FINALIZED = 2,
  UNRECOGNIZED = -1,
}

export function finalityStatusFromJSON(object: any): FinalityStatus {
  switch (object) {
    case 0:
    case "FINALITY_STATUS_UNSPECIFIED":
      return FinalityStatus.FINALITY_STATUS_UNSPECIFIED;
    case 1:
    case "FINALITY_STATUS_PENDING":
      return FinalityStatus.FINALITY_STATUS_PENDING;
    case 2:
    case "FINALITY_STATUS_FINALIZED":
      return FinalityStatus.FINALITY_STATUS_FINALIZED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FinalityStatus.UNRECOGNIZED;
  }
}

export function finalityStatusToJSON(object: FinalityStatus): string {
  switch (object) {
    case FinalityStatus.FINALITY_STATUS_UNSPECIFIED:
      return "FINALITY_STATUS_UNSPECIFIED";
    case FinalityStatus.FINALITY_STATUS_PENDING:
      return "FINALITY_STATUS_PENDING";
    case FinalityStatus.FINALITY_STATUS_FINALIZED:
      return "FINALITY_STATUS_FINALIZED";
    case FinalityStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface FinalityUpdate {
  cursor: string;
  intentRef: Buffer;
  txHash: Buffer;
  status: FinalityStatus;
  blockHash: Buffer;
  height: number;
  timestamp: number;
}

export interface SubscribeFinalityRequest {
  cursor: string;
}

export interface SubscribeFinalityResponse {
  update: FinalityUpdate | undefined;
}

function createBaseFinalityUpdate(): FinalityUpdate {
  return {
    cursor: "",
    intentRef: Buffer.alloc(0),
    txHash: Buffer.alloc(0),
    status: 0,
    blockHash: Buffer.alloc(0),
    height: 0,
    timestamp: 0,
  };
}

export const FinalityUpdate: MessageFns<FinalityUpdate> = {
  encode(message: FinalityUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cursor !== "") {
      writer.uint32(10).string(message.cursor);
    }
    if (message.intentRef.length !== 0) {
      writer.uint32(18).bytes(message.intentRef);
    }
    if (message.txHash.length !== 0) {
      writer.uint32(26).bytes(message.txHash);
    }
    if (message.status !== 0) {
      writer.uint32(32).int32(message.status);
    }
    if (message.blockHash.length !== 0) {
      writer.uint32(42).bytes(message.blockHash);
    }
    if (message.height !== 0) {
      writer.uint32(48).uint64(message.height);
    }
    if (message.timestamp !== 0) {
      writer.uint32(56).int64(message.timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FinalityUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFinalityUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cursor = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.intentRef = Buffer.from(reader.bytes());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.txHash = Buffer.from(reader.bytes());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.blockHash = Buffer.from(reader.bytes());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.height = longToNumber(reader.uint64());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.timestamp = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FinalityUpdate {
    return {
      cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : "",
      intentRef: isSet(object.intentRef) ? Buffer.from(bytesFromBase64(object.intentRef)) : Buffer.alloc(0),
      txHash: isSet(object.txHash) ? Buffer.from(bytesFromBase64(object.txHash)) : Buffer.alloc(0),
      status: isSet(object.status) ? finalityStatusFromJSON(object.status) : 0,
      blockHash: isSet(object.blockHash) ? Buffer.from(bytesFromBase64(object.blockHash)) : Buffer.alloc(0),
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
    };
  },

  toJSON(message: FinalityUpdate): unknown {
    const obj: any = {};
    if (message.cursor !== "") {
      obj.cursor = message.cursor;
    }
    if (message.intentRef.length !== 0) {
      obj.intentRef = base64FromBytes(message.intentRef);
    }
    if (message.txHash.length !== 0) {
      obj.txHash = base64FromBytes(message.txHash);
    }
    if (message.status !== 0) {
      obj.status = finalityStatusToJSON(message.status);
    }
    if (message.blockHash.length !== 0) {
      obj.blockHash = base64FromBytes(message.blockHash);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    return obj;
  },

  create(base?: DeepPartial<FinalityUpdate>): FinalityUpdate {
    return FinalityUpdate.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FinalityUpdate>): FinalityUpdate {
    const message = createBaseFinalityUpdate();
    message.cursor = object.cursor ?? "";
    message.intentRef = object.intentRef ?? Buffer.alloc(0);
    message.txHash = object.txHash ?? Buffer.alloc(0);
    message.status = object.status ?? 0;
    message.blockHash = object.blockHash ?? Buffer.alloc(0);
    message.height = object.height ?? 0;
    message.timestamp = object.timestamp ?? 0;
    return message;
  },
};

function createBaseSubscribeFinalityRequest(): SubscribeFinalityRequest {
  return { cursor: "" };
}

export const SubscribeFinalityRequest: MessageFns<SubscribeFinalityRequest> = {
  encode(message: SubscribeFinalityRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cursor !== "") {
      writer.uint32(10).string(message.cursor);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubscribeFinalityRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscribeFinalityRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.cursor = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubscribeFinalityRequest {
    return { cursor: isSet(object.cursor) ? globalThis.String(object.cursor) : "" };
  },

  toJSON(message: SubscribeFinalityRequest): unknown {
    const obj: any = {};
    if (message.cursor !== "") {
      obj.cursor = message.cursor;
    }
    return obj;
  },

  create(base?: DeepPartial<SubscribeFinalityRequest>): SubscribeFinalityRequest {
    return SubscribeFinalityRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SubscribeFinalityRequest>): SubscribeFinalityRequest {
    const message = createBaseSubscribeFinalityRequest();
    message.cursor = object.cursor ?? "";
    return message;
  },
};

function createBaseSubscribeFinalityResponse(): SubscribeFinalityResponse {
  return { update: undefined };
}

export const SubscribeFinalityResponse: MessageFns<SubscribeFinalityResponse> = {
  encode(message: SubscribeFinalityResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.update !== undefined) {
      FinalityUpdate.encode(message.update, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubscribeFinalityResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscribeFinalityResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.update = FinalityUpdate.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubscribeFinalityResponse {
    return { update: isSet(object.update) ? FinalityUpdate.fromJSON(object.update) : undefined };
  },

  toJSON(message: SubscribeFinalityResponse): unknown {
    const obj: any = {};
    if (message.update !== undefined) {
      obj.update = FinalityUpdate.toJSON(message.update);
    }
    return obj;
  },

  create(base?: DeepPartial<SubscribeFinalityResponse>): SubscribeFinalityResponse {
    return SubscribeFinalityResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SubscribeFinalityResponse>): SubscribeFinalityResponse {
    const message = createBaseSubscribeFinalityResponse();
    message.update = (object.update !== undefined && object.update !== null)
      ? FinalityUpdate.fromPartial(object.update)
      : undefined;
    return message;
  },
};

export type RealtimeService = typeof RealtimeService;
export const RealtimeService = {
  subscribeFinality: {
    path: "/pos.v1.Realtime/SubscribeFinality",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: SubscribeFinalityRequest): Buffer =>
      Buffer.from(SubscribeFinalityRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): SubscribeFinalityRequest => SubscribeFinalityRequest.decode(value),
    responseSerialize: (value: SubscribeFinalityResponse): Buffer =>
      Buffer.from(SubscribeFinalityResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): SubscribeFinalityResponse => SubscribeFinalityResponse.decode(value),
  },
} as const;

export interface RealtimeServer extends UntypedServiceImplementation {
  subscribeFinality: handleServerStreamingCall<SubscribeFinalityRequest, SubscribeFinalityResponse>;
}

export interface RealtimeClient extends Client {
  subscribeFinality(
    request: SubscribeFinalityRequest,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<SubscribeFinalityResponse>;
  subscribeFinality(
    request: SubscribeFinalityRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<SubscribeFinalityResponse>;
}

export const RealtimeClient = makeGenericClientConstructor(RealtimeService, "pos.v1.Realtime") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): RealtimeClient;
  service: typeof RealtimeService;
  serviceName: string;
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
