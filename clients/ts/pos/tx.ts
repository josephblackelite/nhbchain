// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: pos/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "pos.v1";

export interface MsgAuthorizePayment {
  payer: string;
  merchant: string;
  amount: string;
  expiry: number;
  intentRef: Buffer;
}

export interface MsgAuthorizePaymentResponse {
  authorizationId: string;
}

export interface MsgCapturePayment {
  merchant: string;
  authorizationId: string;
  amount: string;
}

export interface MsgCapturePaymentResponse {
  authorizationId: string;
  capturedAmount: string;
  refundedAmount: string;
}

export interface MsgVoidPayment {
  merchant: string;
  authorizationId: string;
  reason: string;
}

export interface MsgVoidPaymentResponse {
  authorizationId: string;
  refundedAmount: string;
  expired: boolean;
}

function createBaseMsgAuthorizePayment(): MsgAuthorizePayment {
  return { payer: "", merchant: "", amount: "", expiry: 0, intentRef: Buffer.alloc(0) };
}

export const MsgAuthorizePayment: MessageFns<MsgAuthorizePayment> = {
  encode(message: MsgAuthorizePayment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.payer !== "") {
      writer.uint32(10).string(message.payer);
    }
    if (message.merchant !== "") {
      writer.uint32(18).string(message.merchant);
    }
    if (message.amount !== "") {
      writer.uint32(26).string(message.amount);
    }
    if (message.expiry !== 0) {
      writer.uint32(32).uint64(message.expiry);
    }
    if (message.intentRef.length !== 0) {
      writer.uint32(42).bytes(message.intentRef);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgAuthorizePayment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAuthorizePayment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.payer = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.merchant = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.amount = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.expiry = longToNumber(reader.uint64());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.intentRef = Buffer.from(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgAuthorizePayment {
    return {
      payer: isSet(object.payer) ? globalThis.String(object.payer) : "",
      merchant: isSet(object.merchant) ? globalThis.String(object.merchant) : "",
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
      expiry: isSet(object.expiry) ? globalThis.Number(object.expiry) : 0,
      intentRef: isSet(object.intentRef) ? Buffer.from(bytesFromBase64(object.intentRef)) : Buffer.alloc(0),
    };
  },

  toJSON(message: MsgAuthorizePayment): unknown {
    const obj: any = {};
    if (message.payer !== "") {
      obj.payer = message.payer;
    }
    if (message.merchant !== "") {
      obj.merchant = message.merchant;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    if (message.expiry !== 0) {
      obj.expiry = Math.round(message.expiry);
    }
    if (message.intentRef.length !== 0) {
      obj.intentRef = base64FromBytes(message.intentRef);
    }
    return obj;
  },

  create(base?: DeepPartial<MsgAuthorizePayment>): MsgAuthorizePayment {
    return MsgAuthorizePayment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgAuthorizePayment>): MsgAuthorizePayment {
    const message = createBaseMsgAuthorizePayment();
    message.payer = object.payer ?? "";
    message.merchant = object.merchant ?? "";
    message.amount = object.amount ?? "";
    message.expiry = object.expiry ?? 0;
    message.intentRef = object.intentRef ?? Buffer.alloc(0);
    return message;
  },
};

function createBaseMsgAuthorizePaymentResponse(): MsgAuthorizePaymentResponse {
  return { authorizationId: "" };
}

export const MsgAuthorizePaymentResponse: MessageFns<MsgAuthorizePaymentResponse> = {
  encode(message: MsgAuthorizePaymentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authorizationId !== "") {
      writer.uint32(10).string(message.authorizationId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgAuthorizePaymentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAuthorizePaymentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authorizationId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgAuthorizePaymentResponse {
    return { authorizationId: isSet(object.authorizationId) ? globalThis.String(object.authorizationId) : "" };
  },

  toJSON(message: MsgAuthorizePaymentResponse): unknown {
    const obj: any = {};
    if (message.authorizationId !== "") {
      obj.authorizationId = message.authorizationId;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgAuthorizePaymentResponse>): MsgAuthorizePaymentResponse {
    return MsgAuthorizePaymentResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgAuthorizePaymentResponse>): MsgAuthorizePaymentResponse {
    const message = createBaseMsgAuthorizePaymentResponse();
    message.authorizationId = object.authorizationId ?? "";
    return message;
  },
};

function createBaseMsgCapturePayment(): MsgCapturePayment {
  return { merchant: "", authorizationId: "", amount: "" };
}

export const MsgCapturePayment: MessageFns<MsgCapturePayment> = {
  encode(message: MsgCapturePayment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.merchant !== "") {
      writer.uint32(10).string(message.merchant);
    }
    if (message.authorizationId !== "") {
      writer.uint32(18).string(message.authorizationId);
    }
    if (message.amount !== "") {
      writer.uint32(26).string(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCapturePayment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCapturePayment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.merchant = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.authorizationId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.amount = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCapturePayment {
    return {
      merchant: isSet(object.merchant) ? globalThis.String(object.merchant) : "",
      authorizationId: isSet(object.authorizationId) ? globalThis.String(object.authorizationId) : "",
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
    };
  },

  toJSON(message: MsgCapturePayment): unknown {
    const obj: any = {};
    if (message.merchant !== "") {
      obj.merchant = message.merchant;
    }
    if (message.authorizationId !== "") {
      obj.authorizationId = message.authorizationId;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgCapturePayment>): MsgCapturePayment {
    return MsgCapturePayment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgCapturePayment>): MsgCapturePayment {
    const message = createBaseMsgCapturePayment();
    message.merchant = object.merchant ?? "";
    message.authorizationId = object.authorizationId ?? "";
    message.amount = object.amount ?? "";
    return message;
  },
};

function createBaseMsgCapturePaymentResponse(): MsgCapturePaymentResponse {
  return { authorizationId: "", capturedAmount: "", refundedAmount: "" };
}

export const MsgCapturePaymentResponse: MessageFns<MsgCapturePaymentResponse> = {
  encode(message: MsgCapturePaymentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authorizationId !== "") {
      writer.uint32(10).string(message.authorizationId);
    }
    if (message.capturedAmount !== "") {
      writer.uint32(18).string(message.capturedAmount);
    }
    if (message.refundedAmount !== "") {
      writer.uint32(26).string(message.refundedAmount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCapturePaymentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCapturePaymentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authorizationId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.capturedAmount = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.refundedAmount = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCapturePaymentResponse {
    return {
      authorizationId: isSet(object.authorizationId) ? globalThis.String(object.authorizationId) : "",
      capturedAmount: isSet(object.capturedAmount) ? globalThis.String(object.capturedAmount) : "",
      refundedAmount: isSet(object.refundedAmount) ? globalThis.String(object.refundedAmount) : "",
    };
  },

  toJSON(message: MsgCapturePaymentResponse): unknown {
    const obj: any = {};
    if (message.authorizationId !== "") {
      obj.authorizationId = message.authorizationId;
    }
    if (message.capturedAmount !== "") {
      obj.capturedAmount = message.capturedAmount;
    }
    if (message.refundedAmount !== "") {
      obj.refundedAmount = message.refundedAmount;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgCapturePaymentResponse>): MsgCapturePaymentResponse {
    return MsgCapturePaymentResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgCapturePaymentResponse>): MsgCapturePaymentResponse {
    const message = createBaseMsgCapturePaymentResponse();
    message.authorizationId = object.authorizationId ?? "";
    message.capturedAmount = object.capturedAmount ?? "";
    message.refundedAmount = object.refundedAmount ?? "";
    return message;
  },
};

function createBaseMsgVoidPayment(): MsgVoidPayment {
  return { merchant: "", authorizationId: "", reason: "" };
}

export const MsgVoidPayment: MessageFns<MsgVoidPayment> = {
  encode(message: MsgVoidPayment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.merchant !== "") {
      writer.uint32(10).string(message.merchant);
    }
    if (message.authorizationId !== "") {
      writer.uint32(18).string(message.authorizationId);
    }
    if (message.reason !== "") {
      writer.uint32(26).string(message.reason);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgVoidPayment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgVoidPayment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.merchant = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.authorizationId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.reason = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgVoidPayment {
    return {
      merchant: isSet(object.merchant) ? globalThis.String(object.merchant) : "",
      authorizationId: isSet(object.authorizationId) ? globalThis.String(object.authorizationId) : "",
      reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
    };
  },

  toJSON(message: MsgVoidPayment): unknown {
    const obj: any = {};
    if (message.merchant !== "") {
      obj.merchant = message.merchant;
    }
    if (message.authorizationId !== "") {
      obj.authorizationId = message.authorizationId;
    }
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgVoidPayment>): MsgVoidPayment {
    return MsgVoidPayment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgVoidPayment>): MsgVoidPayment {
    const message = createBaseMsgVoidPayment();
    message.merchant = object.merchant ?? "";
    message.authorizationId = object.authorizationId ?? "";
    message.reason = object.reason ?? "";
    return message;
  },
};

function createBaseMsgVoidPaymentResponse(): MsgVoidPaymentResponse {
  return { authorizationId: "", refundedAmount: "", expired: false };
}

export const MsgVoidPaymentResponse: MessageFns<MsgVoidPaymentResponse> = {
  encode(message: MsgVoidPaymentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authorizationId !== "") {
      writer.uint32(10).string(message.authorizationId);
    }
    if (message.refundedAmount !== "") {
      writer.uint32(18).string(message.refundedAmount);
    }
    if (message.expired !== false) {
      writer.uint32(24).bool(message.expired);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgVoidPaymentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgVoidPaymentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authorizationId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.refundedAmount = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.expired = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgVoidPaymentResponse {
    return {
      authorizationId: isSet(object.authorizationId) ? globalThis.String(object.authorizationId) : "",
      refundedAmount: isSet(object.refundedAmount) ? globalThis.String(object.refundedAmount) : "",
      expired: isSet(object.expired) ? globalThis.Boolean(object.expired) : false,
    };
  },

  toJSON(message: MsgVoidPaymentResponse): unknown {
    const obj: any = {};
    if (message.authorizationId !== "") {
      obj.authorizationId = message.authorizationId;
    }
    if (message.refundedAmount !== "") {
      obj.refundedAmount = message.refundedAmount;
    }
    if (message.expired !== false) {
      obj.expired = message.expired;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgVoidPaymentResponse>): MsgVoidPaymentResponse {
    return MsgVoidPaymentResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgVoidPaymentResponse>): MsgVoidPaymentResponse {
    const message = createBaseMsgVoidPaymentResponse();
    message.authorizationId = object.authorizationId ?? "";
    message.refundedAmount = object.refundedAmount ?? "";
    message.expired = object.expired ?? false;
    return message;
  },
};

export type TxService = typeof TxService;
export const TxService = {
  authorizePayment: {
    path: "/pos.v1.Tx/AuthorizePayment",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: MsgAuthorizePayment): Buffer => Buffer.from(MsgAuthorizePayment.encode(value).finish()),
    requestDeserialize: (value: Buffer): MsgAuthorizePayment => MsgAuthorizePayment.decode(value),
    responseSerialize: (value: MsgAuthorizePaymentResponse): Buffer =>
      Buffer.from(MsgAuthorizePaymentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): MsgAuthorizePaymentResponse => MsgAuthorizePaymentResponse.decode(value),
  },
  capturePayment: {
    path: "/pos.v1.Tx/CapturePayment",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: MsgCapturePayment): Buffer => Buffer.from(MsgCapturePayment.encode(value).finish()),
    requestDeserialize: (value: Buffer): MsgCapturePayment => MsgCapturePayment.decode(value),
    responseSerialize: (value: MsgCapturePaymentResponse): Buffer =>
      Buffer.from(MsgCapturePaymentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): MsgCapturePaymentResponse => MsgCapturePaymentResponse.decode(value),
  },
  voidPayment: {
    path: "/pos.v1.Tx/VoidPayment",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: MsgVoidPayment): Buffer => Buffer.from(MsgVoidPayment.encode(value).finish()),
    requestDeserialize: (value: Buffer): MsgVoidPayment => MsgVoidPayment.decode(value),
    responseSerialize: (value: MsgVoidPaymentResponse): Buffer =>
      Buffer.from(MsgVoidPaymentResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): MsgVoidPaymentResponse => MsgVoidPaymentResponse.decode(value),
  },
} as const;

export interface TxServer extends UntypedServiceImplementation {
  authorizePayment: handleUnaryCall<MsgAuthorizePayment, MsgAuthorizePaymentResponse>;
  capturePayment: handleUnaryCall<MsgCapturePayment, MsgCapturePaymentResponse>;
  voidPayment: handleUnaryCall<MsgVoidPayment, MsgVoidPaymentResponse>;
}

export interface TxClient extends Client {
  authorizePayment(
    request: MsgAuthorizePayment,
    callback: (error: ServiceError | null, response: MsgAuthorizePaymentResponse) => void,
  ): ClientUnaryCall;
  authorizePayment(
    request: MsgAuthorizePayment,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: MsgAuthorizePaymentResponse) => void,
  ): ClientUnaryCall;
  authorizePayment(
    request: MsgAuthorizePayment,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: MsgAuthorizePaymentResponse) => void,
  ): ClientUnaryCall;
  capturePayment(
    request: MsgCapturePayment,
    callback: (error: ServiceError | null, response: MsgCapturePaymentResponse) => void,
  ): ClientUnaryCall;
  capturePayment(
    request: MsgCapturePayment,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: MsgCapturePaymentResponse) => void,
  ): ClientUnaryCall;
  capturePayment(
    request: MsgCapturePayment,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: MsgCapturePaymentResponse) => void,
  ): ClientUnaryCall;
  voidPayment(
    request: MsgVoidPayment,
    callback: (error: ServiceError | null, response: MsgVoidPaymentResponse) => void,
  ): ClientUnaryCall;
  voidPayment(
    request: MsgVoidPayment,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: MsgVoidPaymentResponse) => void,
  ): ClientUnaryCall;
  voidPayment(
    request: MsgVoidPayment,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: MsgVoidPaymentResponse) => void,
  ): ClientUnaryCall;
}

export const TxClient = makeGenericClientConstructor(TxService, "pos.v1.Tx") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): TxClient;
  service: typeof TxService;
  serviceName: string;
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
