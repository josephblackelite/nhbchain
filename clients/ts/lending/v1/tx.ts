// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: lending/v1/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "lending.v1";

export interface MsgSupply {
  supplier: string;
  poolId: string;
  amount: string;
}

export interface MsgBorrow {
  borrower: string;
  poolId: string;
  amount: string;
  recipient: string;
}

export interface MsgRepay {
  payer: string;
  poolId: string;
  amount: string;
}

export interface MsgLiquidate {
  liquidator: string;
  poolId: string;
  borrower: string;
  repayAmount: string;
}

function createBaseMsgSupply(): MsgSupply {
  return { supplier: "", poolId: "", amount: "" };
}

export const MsgSupply: MessageFns<MsgSupply> = {
  encode(message: MsgSupply, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.supplier !== "") {
      writer.uint32(10).string(message.supplier);
    }
    if (message.poolId !== "") {
      writer.uint32(18).string(message.poolId);
    }
    if (message.amount !== "") {
      writer.uint32(26).string(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgSupply {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSupply();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.supplier = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.poolId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.amount = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSupply {
    return {
      supplier: isSet(object.supplier) ? globalThis.String(object.supplier) : "",
      poolId: isSet(object.poolId) ? globalThis.String(object.poolId) : "",
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
    };
  },

  toJSON(message: MsgSupply): unknown {
    const obj: any = {};
    if (message.supplier !== "") {
      obj.supplier = message.supplier;
    }
    if (message.poolId !== "") {
      obj.poolId = message.poolId;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgSupply>): MsgSupply {
    return MsgSupply.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgSupply>): MsgSupply {
    const message = createBaseMsgSupply();
    message.supplier = object.supplier ?? "";
    message.poolId = object.poolId ?? "";
    message.amount = object.amount ?? "";
    return message;
  },
};

function createBaseMsgBorrow(): MsgBorrow {
  return { borrower: "", poolId: "", amount: "", recipient: "" };
}

export const MsgBorrow: MessageFns<MsgBorrow> = {
  encode(message: MsgBorrow, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.borrower !== "") {
      writer.uint32(10).string(message.borrower);
    }
    if (message.poolId !== "") {
      writer.uint32(18).string(message.poolId);
    }
    if (message.amount !== "") {
      writer.uint32(26).string(message.amount);
    }
    if (message.recipient !== "") {
      writer.uint32(34).string(message.recipient);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgBorrow {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgBorrow();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.borrower = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.poolId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.amount = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.recipient = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgBorrow {
    return {
      borrower: isSet(object.borrower) ? globalThis.String(object.borrower) : "",
      poolId: isSet(object.poolId) ? globalThis.String(object.poolId) : "",
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
      recipient: isSet(object.recipient) ? globalThis.String(object.recipient) : "",
    };
  },

  toJSON(message: MsgBorrow): unknown {
    const obj: any = {};
    if (message.borrower !== "") {
      obj.borrower = message.borrower;
    }
    if (message.poolId !== "") {
      obj.poolId = message.poolId;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    if (message.recipient !== "") {
      obj.recipient = message.recipient;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgBorrow>): MsgBorrow {
    return MsgBorrow.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgBorrow>): MsgBorrow {
    const message = createBaseMsgBorrow();
    message.borrower = object.borrower ?? "";
    message.poolId = object.poolId ?? "";
    message.amount = object.amount ?? "";
    message.recipient = object.recipient ?? "";
    return message;
  },
};

function createBaseMsgRepay(): MsgRepay {
  return { payer: "", poolId: "", amount: "" };
}

export const MsgRepay: MessageFns<MsgRepay> = {
  encode(message: MsgRepay, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.payer !== "") {
      writer.uint32(10).string(message.payer);
    }
    if (message.poolId !== "") {
      writer.uint32(18).string(message.poolId);
    }
    if (message.amount !== "") {
      writer.uint32(26).string(message.amount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRepay {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRepay();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.payer = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.poolId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.amount = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRepay {
    return {
      payer: isSet(object.payer) ? globalThis.String(object.payer) : "",
      poolId: isSet(object.poolId) ? globalThis.String(object.poolId) : "",
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
    };
  },

  toJSON(message: MsgRepay): unknown {
    const obj: any = {};
    if (message.payer !== "") {
      obj.payer = message.payer;
    }
    if (message.poolId !== "") {
      obj.poolId = message.poolId;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgRepay>): MsgRepay {
    return MsgRepay.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgRepay>): MsgRepay {
    const message = createBaseMsgRepay();
    message.payer = object.payer ?? "";
    message.poolId = object.poolId ?? "";
    message.amount = object.amount ?? "";
    return message;
  },
};

function createBaseMsgLiquidate(): MsgLiquidate {
  return { liquidator: "", poolId: "", borrower: "", repayAmount: "" };
}

export const MsgLiquidate: MessageFns<MsgLiquidate> = {
  encode(message: MsgLiquidate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.liquidator !== "") {
      writer.uint32(10).string(message.liquidator);
    }
    if (message.poolId !== "") {
      writer.uint32(18).string(message.poolId);
    }
    if (message.borrower !== "") {
      writer.uint32(26).string(message.borrower);
    }
    if (message.repayAmount !== "") {
      writer.uint32(34).string(message.repayAmount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgLiquidate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgLiquidate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.liquidator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.poolId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.borrower = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.repayAmount = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgLiquidate {
    return {
      liquidator: isSet(object.liquidator) ? globalThis.String(object.liquidator) : "",
      poolId: isSet(object.poolId) ? globalThis.String(object.poolId) : "",
      borrower: isSet(object.borrower) ? globalThis.String(object.borrower) : "",
      repayAmount: isSet(object.repayAmount) ? globalThis.String(object.repayAmount) : "",
    };
  },

  toJSON(message: MsgLiquidate): unknown {
    const obj: any = {};
    if (message.liquidator !== "") {
      obj.liquidator = message.liquidator;
    }
    if (message.poolId !== "") {
      obj.poolId = message.poolId;
    }
    if (message.borrower !== "") {
      obj.borrower = message.borrower;
    }
    if (message.repayAmount !== "") {
      obj.repayAmount = message.repayAmount;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgLiquidate>): MsgLiquidate {
    return MsgLiquidate.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgLiquidate>): MsgLiquidate {
    const message = createBaseMsgLiquidate();
    message.liquidator = object.liquidator ?? "";
    message.poolId = object.poolId ?? "";
    message.borrower = object.borrower ?? "";
    message.repayAmount = object.repayAmount ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
