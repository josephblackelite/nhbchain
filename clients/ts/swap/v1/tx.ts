// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: swap/v1/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "swap.v1";

export interface MsgSwapExactIn {
  trader: string;
  poolId: string;
  tokenIn: string;
  amountIn: string;
  minAmountOut: string;
  recipient: string;
}

export interface MsgSwapExactOut {
  trader: string;
  poolId: string;
  tokenOut: string;
  amountOut: string;
  maxAmountIn: string;
  recipient: string;
}

function createBaseMsgSwapExactIn(): MsgSwapExactIn {
  return { trader: "", poolId: "", tokenIn: "", amountIn: "", minAmountOut: "", recipient: "" };
}

export const MsgSwapExactIn: MessageFns<MsgSwapExactIn> = {
  encode(message: MsgSwapExactIn, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.trader !== "") {
      writer.uint32(10).string(message.trader);
    }
    if (message.poolId !== "") {
      writer.uint32(18).string(message.poolId);
    }
    if (message.tokenIn !== "") {
      writer.uint32(26).string(message.tokenIn);
    }
    if (message.amountIn !== "") {
      writer.uint32(34).string(message.amountIn);
    }
    if (message.minAmountOut !== "") {
      writer.uint32(42).string(message.minAmountOut);
    }
    if (message.recipient !== "") {
      writer.uint32(50).string(message.recipient);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgSwapExactIn {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSwapExactIn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.trader = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.poolId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tokenIn = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.amountIn = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.minAmountOut = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.recipient = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSwapExactIn {
    return {
      trader: isSet(object.trader) ? globalThis.String(object.trader) : "",
      poolId: isSet(object.poolId) ? globalThis.String(object.poolId) : "",
      tokenIn: isSet(object.tokenIn) ? globalThis.String(object.tokenIn) : "",
      amountIn: isSet(object.amountIn) ? globalThis.String(object.amountIn) : "",
      minAmountOut: isSet(object.minAmountOut) ? globalThis.String(object.minAmountOut) : "",
      recipient: isSet(object.recipient) ? globalThis.String(object.recipient) : "",
    };
  },

  toJSON(message: MsgSwapExactIn): unknown {
    const obj: any = {};
    if (message.trader !== "") {
      obj.trader = message.trader;
    }
    if (message.poolId !== "") {
      obj.poolId = message.poolId;
    }
    if (message.tokenIn !== "") {
      obj.tokenIn = message.tokenIn;
    }
    if (message.amountIn !== "") {
      obj.amountIn = message.amountIn;
    }
    if (message.minAmountOut !== "") {
      obj.minAmountOut = message.minAmountOut;
    }
    if (message.recipient !== "") {
      obj.recipient = message.recipient;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgSwapExactIn>): MsgSwapExactIn {
    return MsgSwapExactIn.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgSwapExactIn>): MsgSwapExactIn {
    const message = createBaseMsgSwapExactIn();
    message.trader = object.trader ?? "";
    message.poolId = object.poolId ?? "";
    message.tokenIn = object.tokenIn ?? "";
    message.amountIn = object.amountIn ?? "";
    message.minAmountOut = object.minAmountOut ?? "";
    message.recipient = object.recipient ?? "";
    return message;
  },
};

function createBaseMsgSwapExactOut(): MsgSwapExactOut {
  return { trader: "", poolId: "", tokenOut: "", amountOut: "", maxAmountIn: "", recipient: "" };
}

export const MsgSwapExactOut: MessageFns<MsgSwapExactOut> = {
  encode(message: MsgSwapExactOut, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.trader !== "") {
      writer.uint32(10).string(message.trader);
    }
    if (message.poolId !== "") {
      writer.uint32(18).string(message.poolId);
    }
    if (message.tokenOut !== "") {
      writer.uint32(26).string(message.tokenOut);
    }
    if (message.amountOut !== "") {
      writer.uint32(34).string(message.amountOut);
    }
    if (message.maxAmountIn !== "") {
      writer.uint32(42).string(message.maxAmountIn);
    }
    if (message.recipient !== "") {
      writer.uint32(50).string(message.recipient);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgSwapExactOut {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSwapExactOut();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.trader = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.poolId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tokenOut = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.amountOut = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.maxAmountIn = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.recipient = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSwapExactOut {
    return {
      trader: isSet(object.trader) ? globalThis.String(object.trader) : "",
      poolId: isSet(object.poolId) ? globalThis.String(object.poolId) : "",
      tokenOut: isSet(object.tokenOut) ? globalThis.String(object.tokenOut) : "",
      amountOut: isSet(object.amountOut) ? globalThis.String(object.amountOut) : "",
      maxAmountIn: isSet(object.maxAmountIn) ? globalThis.String(object.maxAmountIn) : "",
      recipient: isSet(object.recipient) ? globalThis.String(object.recipient) : "",
    };
  },

  toJSON(message: MsgSwapExactOut): unknown {
    const obj: any = {};
    if (message.trader !== "") {
      obj.trader = message.trader;
    }
    if (message.poolId !== "") {
      obj.poolId = message.poolId;
    }
    if (message.tokenOut !== "") {
      obj.tokenOut = message.tokenOut;
    }
    if (message.amountOut !== "") {
      obj.amountOut = message.amountOut;
    }
    if (message.maxAmountIn !== "") {
      obj.maxAmountIn = message.maxAmountIn;
    }
    if (message.recipient !== "") {
      obj.recipient = message.recipient;
    }
    return obj;
  },

  create(base?: DeepPartial<MsgSwapExactOut>): MsgSwapExactOut {
    return MsgSwapExactOut.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MsgSwapExactOut>): MsgSwapExactOut {
    const message = createBaseMsgSwapExactOut();
    message.trader = object.trader ?? "";
    message.poolId = object.poolId ?? "";
    message.tokenOut = object.tokenOut ?? "";
    message.amountOut = object.amountOut ?? "";
    message.maxAmountIn = object.maxAmountIn ?? "";
    message.recipient = object.recipient ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
