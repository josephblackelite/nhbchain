// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: consensus/v1/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientReadableStream,
  type ClientUnaryCall,
  type handleServerStreamingCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "consensus.v1";

export interface QueryStateRequest {
  namespace: string;
  key: string;
}

export interface QueryStateResponse {
  value: Buffer;
  proof: Buffer;
}

export interface QueryPrefixRequest {
  namespace: string;
  prefix: string;
}

export interface QueryPrefixResponse {
  key: string;
  value: Buffer;
  proof: Buffer;
}

export interface SimulateTxRequest {
  txBytes: Buffer;
}

export interface Event {
  type: string;
  attributes: { [key: string]: string };
}

export interface Event_AttributesEntry {
  key: string;
  value: string;
}

export interface SimulateTxResponse {
  gasUsed: number;
  gasCost: string;
  events: Event[];
}

function createBaseQueryStateRequest(): QueryStateRequest {
  return { namespace: "", key: "" };
}

export const QueryStateRequest: MessageFns<QueryStateRequest> = {
  encode(message: QueryStateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.namespace !== "") {
      writer.uint32(10).string(message.namespace);
    }
    if (message.key !== "") {
      writer.uint32(18).string(message.key);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryStateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryStateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.namespace = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.key = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryStateRequest {
    return {
      namespace: isSet(object.namespace) ? globalThis.String(object.namespace) : "",
      key: isSet(object.key) ? globalThis.String(object.key) : "",
    };
  },

  toJSON(message: QueryStateRequest): unknown {
    const obj: any = {};
    if (message.namespace !== "") {
      obj.namespace = message.namespace;
    }
    if (message.key !== "") {
      obj.key = message.key;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryStateRequest>): QueryStateRequest {
    return QueryStateRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryStateRequest>): QueryStateRequest {
    const message = createBaseQueryStateRequest();
    message.namespace = object.namespace ?? "";
    message.key = object.key ?? "";
    return message;
  },
};

function createBaseQueryStateResponse(): QueryStateResponse {
  return { value: Buffer.alloc(0), proof: Buffer.alloc(0) };
}

export const QueryStateResponse: MessageFns<QueryStateResponse> = {
  encode(message: QueryStateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.value.length !== 0) {
      writer.uint32(10).bytes(message.value);
    }
    if (message.proof.length !== 0) {
      writer.uint32(18).bytes(message.proof);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryStateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryStateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.value = Buffer.from(reader.bytes());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.proof = Buffer.from(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryStateResponse {
    return {
      value: isSet(object.value) ? Buffer.from(bytesFromBase64(object.value)) : Buffer.alloc(0),
      proof: isSet(object.proof) ? Buffer.from(bytesFromBase64(object.proof)) : Buffer.alloc(0),
    };
  },

  toJSON(message: QueryStateResponse): unknown {
    const obj: any = {};
    if (message.value.length !== 0) {
      obj.value = base64FromBytes(message.value);
    }
    if (message.proof.length !== 0) {
      obj.proof = base64FromBytes(message.proof);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryStateResponse>): QueryStateResponse {
    return QueryStateResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryStateResponse>): QueryStateResponse {
    const message = createBaseQueryStateResponse();
    message.value = object.value ?? Buffer.alloc(0);
    message.proof = object.proof ?? Buffer.alloc(0);
    return message;
  },
};

function createBaseQueryPrefixRequest(): QueryPrefixRequest {
  return { namespace: "", prefix: "" };
}

export const QueryPrefixRequest: MessageFns<QueryPrefixRequest> = {
  encode(message: QueryPrefixRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.namespace !== "") {
      writer.uint32(10).string(message.namespace);
    }
    if (message.prefix !== "") {
      writer.uint32(18).string(message.prefix);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPrefixRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPrefixRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.namespace = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.prefix = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPrefixRequest {
    return {
      namespace: isSet(object.namespace) ? globalThis.String(object.namespace) : "",
      prefix: isSet(object.prefix) ? globalThis.String(object.prefix) : "",
    };
  },

  toJSON(message: QueryPrefixRequest): unknown {
    const obj: any = {};
    if (message.namespace !== "") {
      obj.namespace = message.namespace;
    }
    if (message.prefix !== "") {
      obj.prefix = message.prefix;
    }
    return obj;
  },

  create(base?: DeepPartial<QueryPrefixRequest>): QueryPrefixRequest {
    return QueryPrefixRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryPrefixRequest>): QueryPrefixRequest {
    const message = createBaseQueryPrefixRequest();
    message.namespace = object.namespace ?? "";
    message.prefix = object.prefix ?? "";
    return message;
  },
};

function createBaseQueryPrefixResponse(): QueryPrefixResponse {
  return { key: "", value: Buffer.alloc(0), proof: Buffer.alloc(0) };
}

export const QueryPrefixResponse: MessageFns<QueryPrefixResponse> = {
  encode(message: QueryPrefixResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value.length !== 0) {
      writer.uint32(18).bytes(message.value);
    }
    if (message.proof.length !== 0) {
      writer.uint32(26).bytes(message.proof);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryPrefixResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryPrefixResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = Buffer.from(reader.bytes());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.proof = Buffer.from(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryPrefixResponse {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? Buffer.from(bytesFromBase64(object.value)) : Buffer.alloc(0),
      proof: isSet(object.proof) ? Buffer.from(bytesFromBase64(object.proof)) : Buffer.alloc(0),
    };
  },

  toJSON(message: QueryPrefixResponse): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value.length !== 0) {
      obj.value = base64FromBytes(message.value);
    }
    if (message.proof.length !== 0) {
      obj.proof = base64FromBytes(message.proof);
    }
    return obj;
  },

  create(base?: DeepPartial<QueryPrefixResponse>): QueryPrefixResponse {
    return QueryPrefixResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<QueryPrefixResponse>): QueryPrefixResponse {
    const message = createBaseQueryPrefixResponse();
    message.key = object.key ?? "";
    message.value = object.value ?? Buffer.alloc(0);
    message.proof = object.proof ?? Buffer.alloc(0);
    return message;
  },
};

function createBaseSimulateTxRequest(): SimulateTxRequest {
  return { txBytes: Buffer.alloc(0) };
}

export const SimulateTxRequest: MessageFns<SimulateTxRequest> = {
  encode(message: SimulateTxRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.txBytes.length !== 0) {
      writer.uint32(10).bytes(message.txBytes);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SimulateTxRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSimulateTxRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.txBytes = Buffer.from(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SimulateTxRequest {
    return { txBytes: isSet(object.txBytes) ? Buffer.from(bytesFromBase64(object.txBytes)) : Buffer.alloc(0) };
  },

  toJSON(message: SimulateTxRequest): unknown {
    const obj: any = {};
    if (message.txBytes.length !== 0) {
      obj.txBytes = base64FromBytes(message.txBytes);
    }
    return obj;
  },

  create(base?: DeepPartial<SimulateTxRequest>): SimulateTxRequest {
    return SimulateTxRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SimulateTxRequest>): SimulateTxRequest {
    const message = createBaseSimulateTxRequest();
    message.txBytes = object.txBytes ?? Buffer.alloc(0);
    return message;
  },
};

function createBaseEvent(): Event {
  return { type: "", attributes: {} };
}

export const Event: MessageFns<Event> = {
  encode(message: Event, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== "") {
      writer.uint32(10).string(message.type);
    }
    Object.entries(message.attributes).forEach(([key, value]) => {
      Event_AttributesEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Event {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const entry2 = Event_AttributesEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.attributes[entry2.key] = entry2.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Event {
    return {
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      attributes: isObject(object.attributes)
        ? Object.entries(object.attributes).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: Event): unknown {
    const obj: any = {};
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.attributes) {
      const entries = Object.entries(message.attributes);
      if (entries.length > 0) {
        obj.attributes = {};
        entries.forEach(([k, v]) => {
          obj.attributes[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<Event>): Event {
    return Event.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Event>): Event {
    const message = createBaseEvent();
    message.type = object.type ?? "";
    message.attributes = Object.entries(object.attributes ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseEvent_AttributesEntry(): Event_AttributesEntry {
  return { key: "", value: "" };
}

export const Event_AttributesEntry: MessageFns<Event_AttributesEntry> = {
  encode(message: Event_AttributesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Event_AttributesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEvent_AttributesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Event_AttributesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: Event_AttributesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Event_AttributesEntry>): Event_AttributesEntry {
    return Event_AttributesEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Event_AttributesEntry>): Event_AttributesEntry {
    const message = createBaseEvent_AttributesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseSimulateTxResponse(): SimulateTxResponse {
  return { gasUsed: 0, gasCost: "", events: [] };
}

export const SimulateTxResponse: MessageFns<SimulateTxResponse> = {
  encode(message: SimulateTxResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gasUsed !== 0) {
      writer.uint32(8).uint64(message.gasUsed);
    }
    if (message.gasCost !== "") {
      writer.uint32(18).string(message.gasCost);
    }
    for (const v of message.events) {
      Event.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SimulateTxResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSimulateTxResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.gasUsed = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.gasCost = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.events.push(Event.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SimulateTxResponse {
    return {
      gasUsed: isSet(object.gasUsed) ? globalThis.Number(object.gasUsed) : 0,
      gasCost: isSet(object.gasCost) ? globalThis.String(object.gasCost) : "",
      events: globalThis.Array.isArray(object?.events) ? object.events.map((e: any) => Event.fromJSON(e)) : [],
    };
  },

  toJSON(message: SimulateTxResponse): unknown {
    const obj: any = {};
    if (message.gasUsed !== 0) {
      obj.gasUsed = Math.round(message.gasUsed);
    }
    if (message.gasCost !== "") {
      obj.gasCost = message.gasCost;
    }
    if (message.events?.length) {
      obj.events = message.events.map((e) => Event.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<SimulateTxResponse>): SimulateTxResponse {
    return SimulateTxResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SimulateTxResponse>): SimulateTxResponse {
    const message = createBaseSimulateTxResponse();
    message.gasUsed = object.gasUsed ?? 0;
    message.gasCost = object.gasCost ?? "";
    message.events = object.events?.map((e) => Event.fromPartial(e)) || [];
    return message;
  },
};

export type QueryServiceService = typeof QueryServiceService;
export const QueryServiceService = {
  queryState: {
    path: "/consensus.v1.QueryService/QueryState",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: QueryStateRequest): Buffer => Buffer.from(QueryStateRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): QueryStateRequest => QueryStateRequest.decode(value),
    responseSerialize: (value: QueryStateResponse): Buffer => Buffer.from(QueryStateResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): QueryStateResponse => QueryStateResponse.decode(value),
  },
  queryPrefix: {
    path: "/consensus.v1.QueryService/QueryPrefix",
    requestStream: false,
    responseStream: true,
    requestSerialize: (value: QueryPrefixRequest): Buffer => Buffer.from(QueryPrefixRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): QueryPrefixRequest => QueryPrefixRequest.decode(value),
    responseSerialize: (value: QueryPrefixResponse): Buffer => Buffer.from(QueryPrefixResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): QueryPrefixResponse => QueryPrefixResponse.decode(value),
  },
  simulateTx: {
    path: "/consensus.v1.QueryService/SimulateTx",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: SimulateTxRequest): Buffer => Buffer.from(SimulateTxRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): SimulateTxRequest => SimulateTxRequest.decode(value),
    responseSerialize: (value: SimulateTxResponse): Buffer => Buffer.from(SimulateTxResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): SimulateTxResponse => SimulateTxResponse.decode(value),
  },
} as const;

export interface QueryServiceServer extends UntypedServiceImplementation {
  queryState: handleUnaryCall<QueryStateRequest, QueryStateResponse>;
  queryPrefix: handleServerStreamingCall<QueryPrefixRequest, QueryPrefixResponse>;
  simulateTx: handleUnaryCall<SimulateTxRequest, SimulateTxResponse>;
}

export interface QueryServiceClient extends Client {
  queryState(
    request: QueryStateRequest,
    callback: (error: ServiceError | null, response: QueryStateResponse) => void,
  ): ClientUnaryCall;
  queryState(
    request: QueryStateRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: QueryStateResponse) => void,
  ): ClientUnaryCall;
  queryState(
    request: QueryStateRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: QueryStateResponse) => void,
  ): ClientUnaryCall;
  queryPrefix(request: QueryPrefixRequest, options?: Partial<CallOptions>): ClientReadableStream<QueryPrefixResponse>;
  queryPrefix(
    request: QueryPrefixRequest,
    metadata?: Metadata,
    options?: Partial<CallOptions>,
  ): ClientReadableStream<QueryPrefixResponse>;
  simulateTx(
    request: SimulateTxRequest,
    callback: (error: ServiceError | null, response: SimulateTxResponse) => void,
  ): ClientUnaryCall;
  simulateTx(
    request: SimulateTxRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: SimulateTxResponse) => void,
  ): ClientUnaryCall;
  simulateTx(
    request: SimulateTxRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: SimulateTxResponse) => void,
  ): ClientUnaryCall;
}

export const QueryServiceClient = makeGenericClientConstructor(
  QueryServiceService,
  "consensus.v1.QueryService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): QueryServiceClient;
  service: typeof QueryServiceService;
  serviceName: string;
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
