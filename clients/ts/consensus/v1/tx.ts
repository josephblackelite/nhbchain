// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               unknown
// source: consensus/v1/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Any } from "../../google/protobuf/any";

export const protobufPackage = "consensus.v1";

export interface Fee {
  amount: string;
  denom: string;
  payer: string;
}

export interface TxEnvelope {
  payload: Any | undefined;
  nonce: number;
  chainId: string;
  fee: Fee | undefined;
  memo: string;
}

export interface TxSignature {
  publicKey: Buffer;
  signature: Buffer;
}

export interface SignedTxEnvelope {
  envelope: TxEnvelope | undefined;
  signature: TxSignature | undefined;
}

export interface SubmitTxEnvelopeRequest {
  tx: SignedTxEnvelope | undefined;
}

export interface SubmitTxEnvelopeResponse {
}

function createBaseFee(): Fee {
  return { amount: "", denom: "", payer: "" };
}

export const Fee: MessageFns<Fee> = {
  encode(message: Fee, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.amount !== "") {
      writer.uint32(10).string(message.amount);
    }
    if (message.denom !== "") {
      writer.uint32(18).string(message.denom);
    }
    if (message.payer !== "") {
      writer.uint32(26).string(message.payer);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Fee {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFee();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.amount = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.denom = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.payer = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Fee {
    return {
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      payer: isSet(object.payer) ? globalThis.String(object.payer) : "",
    };
  },

  toJSON(message: Fee): unknown {
    const obj: any = {};
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.payer !== "") {
      obj.payer = message.payer;
    }
    return obj;
  },

  create(base?: DeepPartial<Fee>): Fee {
    return Fee.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Fee>): Fee {
    const message = createBaseFee();
    message.amount = object.amount ?? "";
    message.denom = object.denom ?? "";
    message.payer = object.payer ?? "";
    return message;
  },
};

function createBaseTxEnvelope(): TxEnvelope {
  return { payload: undefined, nonce: 0, chainId: "", fee: undefined, memo: "" };
}

export const TxEnvelope: MessageFns<TxEnvelope> = {
  encode(message: TxEnvelope, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.payload !== undefined) {
      Any.encode(message.payload, writer.uint32(10).fork()).join();
    }
    if (message.nonce !== 0) {
      writer.uint32(16).uint64(message.nonce);
    }
    if (message.chainId !== "") {
      writer.uint32(26).string(message.chainId);
    }
    if (message.fee !== undefined) {
      Fee.encode(message.fee, writer.uint32(34).fork()).join();
    }
    if (message.memo !== "") {
      writer.uint32(42).string(message.memo);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TxEnvelope {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTxEnvelope();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.payload = Any.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.nonce = longToNumber(reader.uint64());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.chainId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.fee = Fee.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.memo = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TxEnvelope {
    return {
      payload: isSet(object.payload) ? Any.fromJSON(object.payload) : undefined,
      nonce: isSet(object.nonce) ? globalThis.Number(object.nonce) : 0,
      chainId: isSet(object.chainId) ? globalThis.String(object.chainId) : "",
      fee: isSet(object.fee) ? Fee.fromJSON(object.fee) : undefined,
      memo: isSet(object.memo) ? globalThis.String(object.memo) : "",
    };
  },

  toJSON(message: TxEnvelope): unknown {
    const obj: any = {};
    if (message.payload !== undefined) {
      obj.payload = Any.toJSON(message.payload);
    }
    if (message.nonce !== 0) {
      obj.nonce = Math.round(message.nonce);
    }
    if (message.chainId !== "") {
      obj.chainId = message.chainId;
    }
    if (message.fee !== undefined) {
      obj.fee = Fee.toJSON(message.fee);
    }
    if (message.memo !== "") {
      obj.memo = message.memo;
    }
    return obj;
  },

  create(base?: DeepPartial<TxEnvelope>): TxEnvelope {
    return TxEnvelope.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TxEnvelope>): TxEnvelope {
    const message = createBaseTxEnvelope();
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? Any.fromPartial(object.payload)
      : undefined;
    message.nonce = object.nonce ?? 0;
    message.chainId = object.chainId ?? "";
    message.fee = (object.fee !== undefined && object.fee !== null) ? Fee.fromPartial(object.fee) : undefined;
    message.memo = object.memo ?? "";
    return message;
  },
};

function createBaseTxSignature(): TxSignature {
  return { publicKey: Buffer.alloc(0), signature: Buffer.alloc(0) };
}

export const TxSignature: MessageFns<TxSignature> = {
  encode(message: TxSignature, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.publicKey.length !== 0) {
      writer.uint32(10).bytes(message.publicKey);
    }
    if (message.signature.length !== 0) {
      writer.uint32(18).bytes(message.signature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TxSignature {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTxSignature();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.publicKey = Buffer.from(reader.bytes());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.signature = Buffer.from(reader.bytes());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TxSignature {
    return {
      publicKey: isSet(object.publicKey) ? Buffer.from(bytesFromBase64(object.publicKey)) : Buffer.alloc(0),
      signature: isSet(object.signature) ? Buffer.from(bytesFromBase64(object.signature)) : Buffer.alloc(0),
    };
  },

  toJSON(message: TxSignature): unknown {
    const obj: any = {};
    if (message.publicKey.length !== 0) {
      obj.publicKey = base64FromBytes(message.publicKey);
    }
    if (message.signature.length !== 0) {
      obj.signature = base64FromBytes(message.signature);
    }
    return obj;
  },

  create(base?: DeepPartial<TxSignature>): TxSignature {
    return TxSignature.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TxSignature>): TxSignature {
    const message = createBaseTxSignature();
    message.publicKey = object.publicKey ?? Buffer.alloc(0);
    message.signature = object.signature ?? Buffer.alloc(0);
    return message;
  },
};

function createBaseSignedTxEnvelope(): SignedTxEnvelope {
  return { envelope: undefined, signature: undefined };
}

export const SignedTxEnvelope: MessageFns<SignedTxEnvelope> = {
  encode(message: SignedTxEnvelope, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.envelope !== undefined) {
      TxEnvelope.encode(message.envelope, writer.uint32(10).fork()).join();
    }
    if (message.signature !== undefined) {
      TxSignature.encode(message.signature, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SignedTxEnvelope {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSignedTxEnvelope();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.envelope = TxEnvelope.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.signature = TxSignature.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SignedTxEnvelope {
    return {
      envelope: isSet(object.envelope) ? TxEnvelope.fromJSON(object.envelope) : undefined,
      signature: isSet(object.signature) ? TxSignature.fromJSON(object.signature) : undefined,
    };
  },

  toJSON(message: SignedTxEnvelope): unknown {
    const obj: any = {};
    if (message.envelope !== undefined) {
      obj.envelope = TxEnvelope.toJSON(message.envelope);
    }
    if (message.signature !== undefined) {
      obj.signature = TxSignature.toJSON(message.signature);
    }
    return obj;
  },

  create(base?: DeepPartial<SignedTxEnvelope>): SignedTxEnvelope {
    return SignedTxEnvelope.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SignedTxEnvelope>): SignedTxEnvelope {
    const message = createBaseSignedTxEnvelope();
    message.envelope = (object.envelope !== undefined && object.envelope !== null)
      ? TxEnvelope.fromPartial(object.envelope)
      : undefined;
    message.signature = (object.signature !== undefined && object.signature !== null)
      ? TxSignature.fromPartial(object.signature)
      : undefined;
    return message;
  },
};

function createBaseSubmitTxEnvelopeRequest(): SubmitTxEnvelopeRequest {
  return { tx: undefined };
}

export const SubmitTxEnvelopeRequest: MessageFns<SubmitTxEnvelopeRequest> = {
  encode(message: SubmitTxEnvelopeRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tx !== undefined) {
      SignedTxEnvelope.encode(message.tx, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubmitTxEnvelopeRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubmitTxEnvelopeRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tx = SignedTxEnvelope.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SubmitTxEnvelopeRequest {
    return { tx: isSet(object.tx) ? SignedTxEnvelope.fromJSON(object.tx) : undefined };
  },

  toJSON(message: SubmitTxEnvelopeRequest): unknown {
    const obj: any = {};
    if (message.tx !== undefined) {
      obj.tx = SignedTxEnvelope.toJSON(message.tx);
    }
    return obj;
  },

  create(base?: DeepPartial<SubmitTxEnvelopeRequest>): SubmitTxEnvelopeRequest {
    return SubmitTxEnvelopeRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SubmitTxEnvelopeRequest>): SubmitTxEnvelopeRequest {
    const message = createBaseSubmitTxEnvelopeRequest();
    message.tx = (object.tx !== undefined && object.tx !== null) ? SignedTxEnvelope.fromPartial(object.tx) : undefined;
    return message;
  },
};

function createBaseSubmitTxEnvelopeResponse(): SubmitTxEnvelopeResponse {
  return {};
}

export const SubmitTxEnvelopeResponse: MessageFns<SubmitTxEnvelopeResponse> = {
  encode(_: SubmitTxEnvelopeResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SubmitTxEnvelopeResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubmitTxEnvelopeResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): SubmitTxEnvelopeResponse {
    return {};
  },

  toJSON(_: SubmitTxEnvelopeResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<SubmitTxEnvelopeResponse>): SubmitTxEnvelopeResponse {
    return SubmitTxEnvelopeResponse.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<SubmitTxEnvelopeResponse>): SubmitTxEnvelopeResponse {
    const message = createBaseSubmitTxEnvelopeResponse();
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
}

function base64FromBytes(arr: Uint8Array): string {
  return globalThis.Buffer.from(arr).toString("base64");
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
