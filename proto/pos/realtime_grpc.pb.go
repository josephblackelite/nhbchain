// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: pos/realtime.proto

package posv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Realtime_SubscribeFinality_FullMethodName = "/pos.v1.Realtime/SubscribeFinality"
)

// RealtimeClient is the client API for Realtime service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RealtimeClient interface {
	SubscribeFinality(ctx context.Context, in *SubscribeFinalityRequest, opts ...grpc.CallOption) (Realtime_SubscribeFinalityClient, error)
}

type realtimeClient struct {
	cc grpc.ClientConnInterface
}

func NewRealtimeClient(cc grpc.ClientConnInterface) RealtimeClient {
	return &realtimeClient{cc}
}

func (c *realtimeClient) SubscribeFinality(ctx context.Context, in *SubscribeFinalityRequest, opts ...grpc.CallOption) (Realtime_SubscribeFinalityClient, error) {
	stream, err := c.cc.NewStream(ctx, &Realtime_ServiceDesc.Streams[0], Realtime_SubscribeFinality_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &realtimeSubscribeFinalityClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Realtime_SubscribeFinalityClient interface {
	Recv() (*SubscribeFinalityResponse, error)
	grpc.ClientStream
}

type realtimeSubscribeFinalityClient struct {
	grpc.ClientStream
}

func (x *realtimeSubscribeFinalityClient) Recv() (*SubscribeFinalityResponse, error) {
	m := new(SubscribeFinalityResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RealtimeServer is the server API for Realtime service.
// All implementations must embed UnimplementedRealtimeServer
// for forward compatibility
type RealtimeServer interface {
	SubscribeFinality(*SubscribeFinalityRequest, Realtime_SubscribeFinalityServer) error
	mustEmbedUnimplementedRealtimeServer()
}

// UnimplementedRealtimeServer must be embedded to have forward compatible implementations.
type UnimplementedRealtimeServer struct {
}

func (UnimplementedRealtimeServer) SubscribeFinality(*SubscribeFinalityRequest, Realtime_SubscribeFinalityServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeFinality not implemented")
}
func (UnimplementedRealtimeServer) mustEmbedUnimplementedRealtimeServer() {}

// UnsafeRealtimeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RealtimeServer will
// result in compilation errors.
type UnsafeRealtimeServer interface {
	mustEmbedUnimplementedRealtimeServer()
}

func RegisterRealtimeServer(s grpc.ServiceRegistrar, srv RealtimeServer) {
	s.RegisterService(&Realtime_ServiceDesc, srv)
}

func _Realtime_SubscribeFinality_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeFinalityRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RealtimeServer).SubscribeFinality(m, &realtimeSubscribeFinalityServer{stream})
}

type Realtime_SubscribeFinalityServer interface {
	Send(*SubscribeFinalityResponse) error
	grpc.ServerStream
}

type realtimeSubscribeFinalityServer struct {
	grpc.ServerStream
}

func (x *realtimeSubscribeFinalityServer) Send(m *SubscribeFinalityResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Realtime_ServiceDesc is the grpc.ServiceDesc for Realtime service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Realtime_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pos.v1.Realtime",
	HandlerType: (*RealtimeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeFinality",
			Handler:       _Realtime_SubscribeFinality_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pos/realtime.proto",
}
