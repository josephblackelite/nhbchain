// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: pos/registry.proto

package posv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Registry_RegisterMerchant_FullMethodName = "/pos.v1.Registry/RegisterMerchant"
	Registry_RegisterDevice_FullMethodName   = "/pos.v1.Registry/RegisterDevice"
	Registry_PauseMerchant_FullMethodName    = "/pos.v1.Registry/PauseMerchant"
	Registry_ResumeMerchant_FullMethodName   = "/pos.v1.Registry/ResumeMerchant"
	Registry_RevokeDevice_FullMethodName     = "/pos.v1.Registry/RevokeDevice"
	Registry_RestoreDevice_FullMethodName    = "/pos.v1.Registry/RestoreDevice"
)

// RegistryClient is the client API for Registry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistryClient interface {
	RegisterMerchant(ctx context.Context, in *MsgRegisterMerchant, opts ...grpc.CallOption) (*MsgRegisterMerchantResponse, error)
	RegisterDevice(ctx context.Context, in *MsgRegisterDevice, opts ...grpc.CallOption) (*MsgRegisterDeviceResponse, error)
	PauseMerchant(ctx context.Context, in *MsgPauseMerchant, opts ...grpc.CallOption) (*MsgPauseMerchantResponse, error)
	ResumeMerchant(ctx context.Context, in *MsgResumeMerchant, opts ...grpc.CallOption) (*MsgResumeMerchantResponse, error)
	RevokeDevice(ctx context.Context, in *MsgRevokeDevice, opts ...grpc.CallOption) (*MsgRevokeDeviceResponse, error)
	RestoreDevice(ctx context.Context, in *MsgRestoreDevice, opts ...grpc.CallOption) (*MsgRestoreDeviceResponse, error)
}

type registryClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistryClient(cc grpc.ClientConnInterface) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) RegisterMerchant(ctx context.Context, in *MsgRegisterMerchant, opts ...grpc.CallOption) (*MsgRegisterMerchantResponse, error) {
	out := new(MsgRegisterMerchantResponse)
	err := c.cc.Invoke(ctx, Registry_RegisterMerchant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) RegisterDevice(ctx context.Context, in *MsgRegisterDevice, opts ...grpc.CallOption) (*MsgRegisterDeviceResponse, error) {
	out := new(MsgRegisterDeviceResponse)
	err := c.cc.Invoke(ctx, Registry_RegisterDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) PauseMerchant(ctx context.Context, in *MsgPauseMerchant, opts ...grpc.CallOption) (*MsgPauseMerchantResponse, error) {
	out := new(MsgPauseMerchantResponse)
	err := c.cc.Invoke(ctx, Registry_PauseMerchant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ResumeMerchant(ctx context.Context, in *MsgResumeMerchant, opts ...grpc.CallOption) (*MsgResumeMerchantResponse, error) {
	out := new(MsgResumeMerchantResponse)
	err := c.cc.Invoke(ctx, Registry_ResumeMerchant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) RevokeDevice(ctx context.Context, in *MsgRevokeDevice, opts ...grpc.CallOption) (*MsgRevokeDeviceResponse, error) {
	out := new(MsgRevokeDeviceResponse)
	err := c.cc.Invoke(ctx, Registry_RevokeDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) RestoreDevice(ctx context.Context, in *MsgRestoreDevice, opts ...grpc.CallOption) (*MsgRestoreDeviceResponse, error) {
	out := new(MsgRestoreDeviceResponse)
	err := c.cc.Invoke(ctx, Registry_RestoreDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryServer is the server API for Registry service.
// All implementations must embed UnimplementedRegistryServer
// for forward compatibility
type RegistryServer interface {
	RegisterMerchant(context.Context, *MsgRegisterMerchant) (*MsgRegisterMerchantResponse, error)
	RegisterDevice(context.Context, *MsgRegisterDevice) (*MsgRegisterDeviceResponse, error)
	PauseMerchant(context.Context, *MsgPauseMerchant) (*MsgPauseMerchantResponse, error)
	ResumeMerchant(context.Context, *MsgResumeMerchant) (*MsgResumeMerchantResponse, error)
	RevokeDevice(context.Context, *MsgRevokeDevice) (*MsgRevokeDeviceResponse, error)
	RestoreDevice(context.Context, *MsgRestoreDevice) (*MsgRestoreDeviceResponse, error)
	mustEmbedUnimplementedRegistryServer()
}

// UnimplementedRegistryServer must be embedded to have forward compatible implementations.
type UnimplementedRegistryServer struct {
}

func (UnimplementedRegistryServer) RegisterMerchant(context.Context, *MsgRegisterMerchant) (*MsgRegisterMerchantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterMerchant not implemented")
}
func (UnimplementedRegistryServer) RegisterDevice(context.Context, *MsgRegisterDevice) (*MsgRegisterDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDevice not implemented")
}
func (UnimplementedRegistryServer) PauseMerchant(context.Context, *MsgPauseMerchant) (*MsgPauseMerchantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseMerchant not implemented")
}
func (UnimplementedRegistryServer) ResumeMerchant(context.Context, *MsgResumeMerchant) (*MsgResumeMerchantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeMerchant not implemented")
}
func (UnimplementedRegistryServer) RevokeDevice(context.Context, *MsgRevokeDevice) (*MsgRevokeDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeDevice not implemented")
}
func (UnimplementedRegistryServer) RestoreDevice(context.Context, *MsgRestoreDevice) (*MsgRestoreDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreDevice not implemented")
}
func (UnimplementedRegistryServer) mustEmbedUnimplementedRegistryServer() {}

// UnsafeRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistryServer will
// result in compilation errors.
type UnsafeRegistryServer interface {
	mustEmbedUnimplementedRegistryServer()
}

func RegisterRegistryServer(s grpc.ServiceRegistrar, srv RegistryServer) {
	s.RegisterService(&Registry_ServiceDesc, srv)
}

func _Registry_RegisterMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterMerchant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).RegisterMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_RegisterMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).RegisterMerchant(ctx, req.(*MsgRegisterMerchant))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_RegisterDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).RegisterDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_RegisterDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).RegisterDevice(ctx, req.(*MsgRegisterDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_PauseMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPauseMerchant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).PauseMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_PauseMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).PauseMerchant(ctx, req.(*MsgPauseMerchant))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ResumeMerchant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgResumeMerchant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ResumeMerchant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_ResumeMerchant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ResumeMerchant(ctx, req.(*MsgResumeMerchant))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_RevokeDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRevokeDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).RevokeDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_RevokeDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).RevokeDevice(ctx, req.(*MsgRevokeDevice))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_RestoreDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRestoreDevice)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).RestoreDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_RestoreDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).RestoreDevice(ctx, req.(*MsgRestoreDevice))
	}
	return interceptor(ctx, in, info, handler)
}

// Registry_ServiceDesc is the grpc.ServiceDesc for Registry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Registry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pos.v1.Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterMerchant",
			Handler:    _Registry_RegisterMerchant_Handler,
		},
		{
			MethodName: "RegisterDevice",
			Handler:    _Registry_RegisterDevice_Handler,
		},
		{
			MethodName: "PauseMerchant",
			Handler:    _Registry_PauseMerchant_Handler,
		},
		{
			MethodName: "ResumeMerchant",
			Handler:    _Registry_ResumeMerchant_Handler,
		},
		{
			MethodName: "RevokeDevice",
			Handler:    _Registry_RevokeDevice_Handler,
		},
		{
			MethodName: "RestoreDevice",
			Handler:    _Registry_RestoreDevice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pos/registry.proto",
}
