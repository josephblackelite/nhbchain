syntax = "proto3";

package pos.v1;

option go_package = "nhbchain/proto/pos;posv1";

message MsgAuthorizePayment {
  string payer = 1;
  string merchant = 2;
  string amount = 3;
  uint64 expiry = 4;
  bytes intent_ref = 5;
  // Nonce the client signs over to guarantee uniqueness of the
  // authorization intent within the chosen chain.
  uint64 nonce = 6;
  // Unix timestamp (seconds) after which the signed authorization
  // should be considered expired by verifiers.
  uint64 expires_at = 7;
  // Chain identifier used to scope signatures and prevent cross-network
  // replay attacks.
  string chain_id = 8;
}

message MsgAuthorizePaymentResponse {
  string authorization_id = 1;
}

message MsgCapturePayment {
  string merchant = 1;
  string authorization_id = 2;
  string amount = 3;
  // Nonce scoped to the capture request to prevent replay of the same
  // authorization on the target chain.
  uint64 nonce = 4;
  // Expiration for the capture signature expressed as a unix timestamp
  // in seconds.
  uint64 expires_at = 5;
  // Chain identifier that bind the capture signature to a specific
  // execution environment.
  string chain_id = 6;
}

message MsgCapturePaymentResponse {
  string authorization_id = 1;
  string captured_amount = 2;
  string refunded_amount = 3;
}

message MsgVoidPayment {
  string merchant = 1;
  string authorization_id = 2;
  string reason = 3;
  // Nonce scoped to the void request to prevent replays within the
  // selected chain.
  uint64 nonce = 4;
  // Expiration for the void signature expressed as a unix timestamp in
  // seconds.
  uint64 expires_at = 5;
  // Chain identifier the void signature was produced for, preventing
  // cross-network reuse.
  string chain_id = 6;
}

message MsgVoidPaymentResponse {
  string authorization_id = 1;
  string refunded_amount = 2;
  bool expired = 3;
}

service Tx {
  rpc AuthorizePayment(MsgAuthorizePayment) returns (MsgAuthorizePaymentResponse);
  rpc CapturePayment(MsgCapturePayment) returns (MsgCapturePaymentResponse);
  rpc VoidPayment(MsgVoidPayment) returns (MsgVoidPaymentResponse);
}
