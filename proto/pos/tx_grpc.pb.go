// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: pos/tx.proto

package posv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Tx_AuthorizePayment_FullMethodName = "/pos.v1.Tx/AuthorizePayment"
	Tx_CapturePayment_FullMethodName   = "/pos.v1.Tx/CapturePayment"
	Tx_VoidPayment_FullMethodName      = "/pos.v1.Tx/VoidPayment"
)

// TxClient is the client API for Tx service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TxClient interface {
	AuthorizePayment(ctx context.Context, in *MsgAuthorizePayment, opts ...grpc.CallOption) (*MsgAuthorizePaymentResponse, error)
	CapturePayment(ctx context.Context, in *MsgCapturePayment, opts ...grpc.CallOption) (*MsgCapturePaymentResponse, error)
	VoidPayment(ctx context.Context, in *MsgVoidPayment, opts ...grpc.CallOption) (*MsgVoidPaymentResponse, error)
}

type txClient struct {
	cc grpc.ClientConnInterface
}

func NewTxClient(cc grpc.ClientConnInterface) TxClient {
	return &txClient{cc}
}

func (c *txClient) AuthorizePayment(ctx context.Context, in *MsgAuthorizePayment, opts ...grpc.CallOption) (*MsgAuthorizePaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgAuthorizePaymentResponse)
	err := c.cc.Invoke(ctx, Tx_AuthorizePayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txClient) CapturePayment(ctx context.Context, in *MsgCapturePayment, opts ...grpc.CallOption) (*MsgCapturePaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgCapturePaymentResponse)
	err := c.cc.Invoke(ctx, Tx_CapturePayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *txClient) VoidPayment(ctx context.Context, in *MsgVoidPayment, opts ...grpc.CallOption) (*MsgVoidPaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgVoidPaymentResponse)
	err := c.cc.Invoke(ctx, Tx_VoidPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TxServer is the server API for Tx service.
// All implementations must embed UnimplementedTxServer
// for forward compatibility.
type TxServer interface {
	AuthorizePayment(context.Context, *MsgAuthorizePayment) (*MsgAuthorizePaymentResponse, error)
	CapturePayment(context.Context, *MsgCapturePayment) (*MsgCapturePaymentResponse, error)
	VoidPayment(context.Context, *MsgVoidPayment) (*MsgVoidPaymentResponse, error)
	mustEmbedUnimplementedTxServer()
}

// UnimplementedTxServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTxServer struct{}

func (UnimplementedTxServer) AuthorizePayment(context.Context, *MsgAuthorizePayment) (*MsgAuthorizePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthorizePayment not implemented")
}
func (UnimplementedTxServer) CapturePayment(context.Context, *MsgCapturePayment) (*MsgCapturePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CapturePayment not implemented")
}
func (UnimplementedTxServer) VoidPayment(context.Context, *MsgVoidPayment) (*MsgVoidPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoidPayment not implemented")
}
func (UnimplementedTxServer) mustEmbedUnimplementedTxServer() {}
func (UnimplementedTxServer) testEmbeddedByValue()            {}

// UnsafeTxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TxServer will
// result in compilation errors.
type UnsafeTxServer interface {
	mustEmbedUnimplementedTxServer()
}

func RegisterTxServer(s grpc.ServiceRegistrar, srv TxServer) {
	// If the following call pancis, it indicates UnimplementedTxServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Tx_ServiceDesc, srv)
}

func _Tx_AuthorizePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAuthorizePayment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxServer).AuthorizePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tx_AuthorizePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxServer).AuthorizePayment(ctx, req.(*MsgAuthorizePayment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tx_CapturePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCapturePayment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxServer).CapturePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tx_CapturePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxServer).CapturePayment(ctx, req.(*MsgCapturePayment))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tx_VoidPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVoidPayment)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TxServer).VoidPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tx_VoidPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TxServer).VoidPayment(ctx, req.(*MsgVoidPayment))
	}
	return interceptor(ctx, in, info, handler)
}

// Tx_ServiceDesc is the grpc.ServiceDesc for Tx service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tx_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pos.v1.Tx",
	HandlerType: (*TxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthorizePayment",
			Handler:    _Tx_AuthorizePayment_Handler,
		},
		{
			MethodName: "CapturePayment",
			Handler:    _Tx_CapturePayment_Handler,
		},
		{
			MethodName: "VoidPayment",
			Handler:    _Tx_VoidPayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pos/tx.proto",
}
