// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: gov/v1/gov.proto

package govv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GovernanceService_SubmitProposal_FullMethodName = "/gov.v1.GovernanceService/SubmitProposal"
	GovernanceService_GetProposal_FullMethodName    = "/gov.v1.GovernanceService/GetProposal"
	GovernanceService_ListProposals_FullMethodName  = "/gov.v1.GovernanceService/ListProposals"
	GovernanceService_SubmitVote_FullMethodName     = "/gov.v1.GovernanceService/SubmitVote"
)

// GovernanceServiceClient is the client API for GovernanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GovernanceServiceClient interface {
	SubmitProposal(ctx context.Context, in *SubmitProposalRequest, opts ...grpc.CallOption) (*SubmitProposalResponse, error)
	GetProposal(ctx context.Context, in *GetProposalRequest, opts ...grpc.CallOption) (*GetProposalResponse, error)
	ListProposals(ctx context.Context, in *ListProposalsRequest, opts ...grpc.CallOption) (*ListProposalsResponse, error)
	SubmitVote(ctx context.Context, in *SubmitVoteRequest, opts ...grpc.CallOption) (*SubmitVoteResponse, error)
}

type governanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGovernanceServiceClient(cc grpc.ClientConnInterface) GovernanceServiceClient {
	return &governanceServiceClient{cc}
}

func (c *governanceServiceClient) SubmitProposal(ctx context.Context, in *SubmitProposalRequest, opts ...grpc.CallOption) (*SubmitProposalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitProposalResponse)
	err := c.cc.Invoke(ctx, GovernanceService_SubmitProposal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *governanceServiceClient) GetProposal(ctx context.Context, in *GetProposalRequest, opts ...grpc.CallOption) (*GetProposalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProposalResponse)
	err := c.cc.Invoke(ctx, GovernanceService_GetProposal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *governanceServiceClient) ListProposals(ctx context.Context, in *ListProposalsRequest, opts ...grpc.CallOption) (*ListProposalsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListProposalsResponse)
	err := c.cc.Invoke(ctx, GovernanceService_ListProposals_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *governanceServiceClient) SubmitVote(ctx context.Context, in *SubmitVoteRequest, opts ...grpc.CallOption) (*SubmitVoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitVoteResponse)
	err := c.cc.Invoke(ctx, GovernanceService_SubmitVote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GovernanceServiceServer is the server API for GovernanceService service.
// All implementations must embed UnimplementedGovernanceServiceServer
// for forward compatibility.
type GovernanceServiceServer interface {
	SubmitProposal(context.Context, *SubmitProposalRequest) (*SubmitProposalResponse, error)
	GetProposal(context.Context, *GetProposalRequest) (*GetProposalResponse, error)
	ListProposals(context.Context, *ListProposalsRequest) (*ListProposalsResponse, error)
	SubmitVote(context.Context, *SubmitVoteRequest) (*SubmitVoteResponse, error)
	mustEmbedUnimplementedGovernanceServiceServer()
}

// UnimplementedGovernanceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGovernanceServiceServer struct{}

func (UnimplementedGovernanceServiceServer) SubmitProposal(context.Context, *SubmitProposalRequest) (*SubmitProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitProposal not implemented")
}
func (UnimplementedGovernanceServiceServer) GetProposal(context.Context, *GetProposalRequest) (*GetProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProposal not implemented")
}
func (UnimplementedGovernanceServiceServer) ListProposals(context.Context, *ListProposalsRequest) (*ListProposalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProposals not implemented")
}
func (UnimplementedGovernanceServiceServer) SubmitVote(context.Context, *SubmitVoteRequest) (*SubmitVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitVote not implemented")
}
func (UnimplementedGovernanceServiceServer) mustEmbedUnimplementedGovernanceServiceServer() {}
func (UnimplementedGovernanceServiceServer) testEmbeddedByValue()                           {}

// UnsafeGovernanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GovernanceServiceServer will
// result in compilation errors.
type UnsafeGovernanceServiceServer interface {
	mustEmbedUnimplementedGovernanceServiceServer()
}

func RegisterGovernanceServiceServer(s grpc.ServiceRegistrar, srv GovernanceServiceServer) {
	// If the following call pancis, it indicates UnimplementedGovernanceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GovernanceService_ServiceDesc, srv)
}

func _GovernanceService_SubmitProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GovernanceServiceServer).SubmitProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GovernanceService_SubmitProposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GovernanceServiceServer).SubmitProposal(ctx, req.(*SubmitProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GovernanceService_GetProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProposalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GovernanceServiceServer).GetProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GovernanceService_GetProposal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GovernanceServiceServer).GetProposal(ctx, req.(*GetProposalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GovernanceService_ListProposals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProposalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GovernanceServiceServer).ListProposals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GovernanceService_ListProposals_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GovernanceServiceServer).ListProposals(ctx, req.(*ListProposalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GovernanceService_SubmitVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GovernanceServiceServer).SubmitVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GovernanceService_SubmitVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GovernanceServiceServer).SubmitVote(ctx, req.(*SubmitVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GovernanceService_ServiceDesc is the grpc.ServiceDesc for GovernanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GovernanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gov.v1.GovernanceService",
	HandlerType: (*GovernanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitProposal",
			Handler:    _GovernanceService_SubmitProposal_Handler,
		},
		{
			MethodName: "GetProposal",
			Handler:    _GovernanceService_GetProposal_Handler,
		},
		{
			MethodName: "ListProposals",
			Handler:    _GovernanceService_ListProposals_Handler,
		},
		{
			MethodName: "SubmitVote",
			Handler:    _GovernanceService_SubmitVote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gov/v1/gov.proto",
}
