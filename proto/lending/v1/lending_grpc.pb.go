// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: lending/v1/lending.proto

package lendingv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LendingService_GetMarket_FullMethodName     = "/lending.v1.LendingService/GetMarket"
	LendingService_ListMarkets_FullMethodName   = "/lending.v1.LendingService/ListMarkets"
	LendingService_GetPosition_FullMethodName   = "/lending.v1.LendingService/GetPosition"
	LendingService_SupplyAsset_FullMethodName   = "/lending.v1.LendingService/SupplyAsset"
	LendingService_WithdrawAsset_FullMethodName = "/lending.v1.LendingService/WithdrawAsset"
	LendingService_BorrowAsset_FullMethodName   = "/lending.v1.LendingService/BorrowAsset"
	LendingService_RepayAsset_FullMethodName    = "/lending.v1.LendingService/RepayAsset"
)

// LendingServiceClient is the client API for LendingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LendingServiceClient interface {
	GetMarket(ctx context.Context, in *GetMarketRequest, opts ...grpc.CallOption) (*GetMarketResponse, error)
	ListMarkets(ctx context.Context, in *ListMarketsRequest, opts ...grpc.CallOption) (*ListMarketsResponse, error)
	GetPosition(ctx context.Context, in *GetPositionRequest, opts ...grpc.CallOption) (*GetPositionResponse, error)
	SupplyAsset(ctx context.Context, in *SupplyAssetRequest, opts ...grpc.CallOption) (*SupplyAssetResponse, error)
	WithdrawAsset(ctx context.Context, in *WithdrawAssetRequest, opts ...grpc.CallOption) (*WithdrawAssetResponse, error)
	BorrowAsset(ctx context.Context, in *BorrowAssetRequest, opts ...grpc.CallOption) (*BorrowAssetResponse, error)
	RepayAsset(ctx context.Context, in *RepayAssetRequest, opts ...grpc.CallOption) (*RepayAssetResponse, error)
}

type lendingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLendingServiceClient(cc grpc.ClientConnInterface) LendingServiceClient {
	return &lendingServiceClient{cc}
}

func (c *lendingServiceClient) GetMarket(ctx context.Context, in *GetMarketRequest, opts ...grpc.CallOption) (*GetMarketResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMarketResponse)
	err := c.cc.Invoke(ctx, LendingService_GetMarket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lendingServiceClient) ListMarkets(ctx context.Context, in *ListMarketsRequest, opts ...grpc.CallOption) (*ListMarketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMarketsResponse)
	err := c.cc.Invoke(ctx, LendingService_ListMarkets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lendingServiceClient) GetPosition(ctx context.Context, in *GetPositionRequest, opts ...grpc.CallOption) (*GetPositionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPositionResponse)
	err := c.cc.Invoke(ctx, LendingService_GetPosition_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lendingServiceClient) SupplyAsset(ctx context.Context, in *SupplyAssetRequest, opts ...grpc.CallOption) (*SupplyAssetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupplyAssetResponse)
	err := c.cc.Invoke(ctx, LendingService_SupplyAsset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lendingServiceClient) WithdrawAsset(ctx context.Context, in *WithdrawAssetRequest, opts ...grpc.CallOption) (*WithdrawAssetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawAssetResponse)
	err := c.cc.Invoke(ctx, LendingService_WithdrawAsset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lendingServiceClient) BorrowAsset(ctx context.Context, in *BorrowAssetRequest, opts ...grpc.CallOption) (*BorrowAssetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BorrowAssetResponse)
	err := c.cc.Invoke(ctx, LendingService_BorrowAsset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lendingServiceClient) RepayAsset(ctx context.Context, in *RepayAssetRequest, opts ...grpc.CallOption) (*RepayAssetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RepayAssetResponse)
	err := c.cc.Invoke(ctx, LendingService_RepayAsset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LendingServiceServer is the server API for LendingService service.
// All implementations must embed UnimplementedLendingServiceServer
// for forward compatibility.
type LendingServiceServer interface {
	GetMarket(context.Context, *GetMarketRequest) (*GetMarketResponse, error)
	ListMarkets(context.Context, *ListMarketsRequest) (*ListMarketsResponse, error)
	GetPosition(context.Context, *GetPositionRequest) (*GetPositionResponse, error)
	SupplyAsset(context.Context, *SupplyAssetRequest) (*SupplyAssetResponse, error)
	WithdrawAsset(context.Context, *WithdrawAssetRequest) (*WithdrawAssetResponse, error)
	BorrowAsset(context.Context, *BorrowAssetRequest) (*BorrowAssetResponse, error)
	RepayAsset(context.Context, *RepayAssetRequest) (*RepayAssetResponse, error)
	mustEmbedUnimplementedLendingServiceServer()
}

// UnimplementedLendingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLendingServiceServer struct{}

func (UnimplementedLendingServiceServer) GetMarket(context.Context, *GetMarketRequest) (*GetMarketResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarket not implemented")
}
func (UnimplementedLendingServiceServer) ListMarkets(context.Context, *ListMarketsRequest) (*ListMarketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMarkets not implemented")
}
func (UnimplementedLendingServiceServer) GetPosition(context.Context, *GetPositionRequest) (*GetPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPosition not implemented")
}
func (UnimplementedLendingServiceServer) SupplyAsset(context.Context, *SupplyAssetRequest) (*SupplyAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupplyAsset not implemented")
}
func (UnimplementedLendingServiceServer) WithdrawAsset(context.Context, *WithdrawAssetRequest) (*WithdrawAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawAsset not implemented")
}
func (UnimplementedLendingServiceServer) BorrowAsset(context.Context, *BorrowAssetRequest) (*BorrowAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BorrowAsset not implemented")
}
func (UnimplementedLendingServiceServer) RepayAsset(context.Context, *RepayAssetRequest) (*RepayAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepayAsset not implemented")
}
func (UnimplementedLendingServiceServer) mustEmbedUnimplementedLendingServiceServer() {}
func (UnimplementedLendingServiceServer) testEmbeddedByValue()                        {}

// UnsafeLendingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LendingServiceServer will
// result in compilation errors.
type UnsafeLendingServiceServer interface {
	mustEmbedUnimplementedLendingServiceServer()
}

func RegisterLendingServiceServer(s grpc.ServiceRegistrar, srv LendingServiceServer) {
	// If the following call pancis, it indicates UnimplementedLendingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LendingService_ServiceDesc, srv)
}

func _LendingService_GetMarket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LendingServiceServer).GetMarket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LendingService_GetMarket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LendingServiceServer).GetMarket(ctx, req.(*GetMarketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LendingService_ListMarkets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMarketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LendingServiceServer).ListMarkets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LendingService_ListMarkets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LendingServiceServer).ListMarkets(ctx, req.(*ListMarketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LendingService_GetPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LendingServiceServer).GetPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LendingService_GetPosition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LendingServiceServer).GetPosition(ctx, req.(*GetPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LendingService_SupplyAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplyAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LendingServiceServer).SupplyAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LendingService_SupplyAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LendingServiceServer).SupplyAsset(ctx, req.(*SupplyAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LendingService_WithdrawAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LendingServiceServer).WithdrawAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LendingService_WithdrawAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LendingServiceServer).WithdrawAsset(ctx, req.(*WithdrawAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LendingService_BorrowAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BorrowAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LendingServiceServer).BorrowAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LendingService_BorrowAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LendingServiceServer).BorrowAsset(ctx, req.(*BorrowAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LendingService_RepayAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepayAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LendingServiceServer).RepayAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LendingService_RepayAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LendingServiceServer).RepayAsset(ctx, req.(*RepayAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LendingService_ServiceDesc is the grpc.ServiceDesc for LendingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LendingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "lending.v1.LendingService",
	HandlerType: (*LendingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMarket",
			Handler:    _LendingService_GetMarket_Handler,
		},
		{
			MethodName: "ListMarkets",
			Handler:    _LendingService_ListMarkets_Handler,
		},
		{
			MethodName: "GetPosition",
			Handler:    _LendingService_GetPosition_Handler,
		},
		{
			MethodName: "SupplyAsset",
			Handler:    _LendingService_SupplyAsset_Handler,
		},
		{
			MethodName: "WithdrawAsset",
			Handler:    _LendingService_WithdrawAsset_Handler,
		},
		{
			MethodName: "BorrowAsset",
			Handler:    _LendingService_BorrowAsset_Handler,
		},
		{
			MethodName: "RepayAsset",
			Handler:    _LendingService_RepayAsset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lending/v1/lending.proto",
}
