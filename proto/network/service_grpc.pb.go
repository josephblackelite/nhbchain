// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: proto/network/service.proto

package networkpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Network_Gossip_FullMethodName    = "/nhb.network.v1.Network/Gossip"
	Network_GetView_FullMethodName   = "/nhb.network.v1.Network/GetView"
	Network_ListPeers_FullMethodName = "/nhb.network.v1.Network/ListPeers"
	Network_DialPeer_FullMethodName  = "/nhb.network.v1.Network/DialPeer"
	Network_BanPeer_FullMethodName   = "/nhb.network.v1.Network/BanPeer"
)

// NetworkClient is the client API for Network service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkClient interface {
	Gossip(ctx context.Context, opts ...grpc.CallOption) (Network_GossipClient, error)
	GetView(ctx context.Context, in *GetViewRequest, opts ...grpc.CallOption) (*GetViewResponse, error)
	ListPeers(ctx context.Context, in *ListPeersRequest, opts ...grpc.CallOption) (*ListPeersResponse, error)
	DialPeer(ctx context.Context, in *DialPeerRequest, opts ...grpc.CallOption) (*DialPeerResponse, error)
	BanPeer(ctx context.Context, in *BanPeerRequest, opts ...grpc.CallOption) (*BanPeerResponse, error)
}

type networkClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkClient(cc grpc.ClientConnInterface) NetworkClient {
	return &networkClient{cc}
}

func (c *networkClient) Gossip(ctx context.Context, opts ...grpc.CallOption) (Network_GossipClient, error) {
	stream, err := c.cc.NewStream(ctx, &Network_ServiceDesc.Streams[0], Network_Gossip_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &networkGossipClient{stream}
	return x, nil
}

type Network_GossipClient interface {
	Send(*NetworkEnvelope) error
	Recv() (*NetworkEnvelope, error)
	grpc.ClientStream
}

type networkGossipClient struct {
	grpc.ClientStream
}

func (x *networkGossipClient) Send(m *NetworkEnvelope) error {
	return x.ClientStream.SendMsg(m)
}

func (x *networkGossipClient) Recv() (*NetworkEnvelope, error) {
	m := new(NetworkEnvelope)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkClient) GetView(ctx context.Context, in *GetViewRequest, opts ...grpc.CallOption) (*GetViewResponse, error) {
	out := new(GetViewResponse)
	err := c.cc.Invoke(ctx, Network_GetView_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) ListPeers(ctx context.Context, in *ListPeersRequest, opts ...grpc.CallOption) (*ListPeersResponse, error) {
	out := new(ListPeersResponse)
	err := c.cc.Invoke(ctx, Network_ListPeers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) DialPeer(ctx context.Context, in *DialPeerRequest, opts ...grpc.CallOption) (*DialPeerResponse, error) {
	out := new(DialPeerResponse)
	err := c.cc.Invoke(ctx, Network_DialPeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkClient) BanPeer(ctx context.Context, in *BanPeerRequest, opts ...grpc.CallOption) (*BanPeerResponse, error) {
	out := new(BanPeerResponse)
	err := c.cc.Invoke(ctx, Network_BanPeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkServer is the server API for Network service.
// All implementations must embed UnimplementedNetworkServer
// for forward compatibility
type NetworkServer interface {
	Gossip(Network_GossipServer) error
	GetView(context.Context, *GetViewRequest) (*GetViewResponse, error)
	ListPeers(context.Context, *ListPeersRequest) (*ListPeersResponse, error)
	DialPeer(context.Context, *DialPeerRequest) (*DialPeerResponse, error)
	BanPeer(context.Context, *BanPeerRequest) (*BanPeerResponse, error)
	mustEmbedUnimplementedNetworkServer()
}

// UnimplementedNetworkServer must be embedded to have forward compatible implementations.
type UnimplementedNetworkServer struct {
}

func (UnimplementedNetworkServer) Gossip(Network_GossipServer) error {
	return status.Errorf(codes.Unimplemented, "method Gossip not implemented")
}
func (UnimplementedNetworkServer) GetView(context.Context, *GetViewRequest) (*GetViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetView not implemented")
}
func (UnimplementedNetworkServer) ListPeers(context.Context, *ListPeersRequest) (*ListPeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPeers not implemented")
}
func (UnimplementedNetworkServer) DialPeer(context.Context, *DialPeerRequest) (*DialPeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialPeer not implemented")
}
func (UnimplementedNetworkServer) BanPeer(context.Context, *BanPeerRequest) (*BanPeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanPeer not implemented")
}
func (UnimplementedNetworkServer) mustEmbedUnimplementedNetworkServer() {}

// UnsafeNetworkServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkServer will
// result in compilation errors.
type UnsafeNetworkServer interface {
	mustEmbedUnimplementedNetworkServer()
}

func RegisterNetworkServer(s grpc.ServiceRegistrar, srv NetworkServer) {
	s.RegisterService(&Network_ServiceDesc, srv)
}

func _Network_Gossip_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NetworkServer).Gossip(&networkGossipServer{stream})
}

type Network_GossipServer interface {
	Send(*NetworkEnvelope) error
	Recv() (*NetworkEnvelope, error)
	grpc.ServerStream
}

type networkGossipServer struct {
	grpc.ServerStream
}

func (x *networkGossipServer) Send(m *NetworkEnvelope) error {
	return x.ServerStream.SendMsg(m)
}

func (x *networkGossipServer) Recv() (*NetworkEnvelope, error) {
	m := new(NetworkEnvelope)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Network_GetView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).GetView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Network_GetView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).GetView(ctx, req.(*GetViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_ListPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).ListPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Network_ListPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).ListPeers(ctx, req.(*ListPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_DialPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DialPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).DialPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Network_DialPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).DialPeer(ctx, req.(*DialPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Network_BanPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BanPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServer).BanPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Network_BanPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServer).BanPeer(ctx, req.(*BanPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Network_ServiceDesc is the grpc.ServiceDesc for Network service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Network_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nhb.network.v1.Network",
	HandlerType: (*NetworkServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetView",
			Handler:    _Network_GetView_Handler,
		},
		{
			MethodName: "ListPeers",
			Handler:    _Network_ListPeers_Handler,
		},
		{
			MethodName: "DialPeer",
			Handler:    _Network_DialPeer_Handler,
		},
		{
			MethodName: "BanPeer",
			Handler:    _Network_BanPeer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Gossip",
			Handler:       _Network_Gossip_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/network/service.proto",
}
