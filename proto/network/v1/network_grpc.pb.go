// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: network/v1/network.proto

package networkv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NetworkService_Gossip_FullMethodName    = "/network.v1.NetworkService/Gossip"
	NetworkService_GetView_FullMethodName   = "/network.v1.NetworkService/GetView"
	NetworkService_ListPeers_FullMethodName = "/network.v1.NetworkService/ListPeers"
	NetworkService_DialPeer_FullMethodName  = "/network.v1.NetworkService/DialPeer"
	NetworkService_BanPeer_FullMethodName   = "/network.v1.NetworkService/BanPeer"
)

// NetworkServiceClient is the client API for NetworkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkServiceClient interface {
	Gossip(ctx context.Context, opts ...grpc.CallOption) (NetworkService_GossipClient, error)
	GetView(ctx context.Context, in *GetViewRequest, opts ...grpc.CallOption) (*GetViewResponse, error)
	ListPeers(ctx context.Context, in *ListPeersRequest, opts ...grpc.CallOption) (*ListPeersResponse, error)
	DialPeer(ctx context.Context, in *DialPeerRequest, opts ...grpc.CallOption) (*DialPeerResponse, error)
	BanPeer(ctx context.Context, in *BanPeerRequest, opts ...grpc.CallOption) (*BanPeerResponse, error)
}

type networkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkServiceClient(cc grpc.ClientConnInterface) NetworkServiceClient {
	return &networkServiceClient{cc}
}

func (c *networkServiceClient) Gossip(ctx context.Context, opts ...grpc.CallOption) (NetworkService_GossipClient, error) {
	stream, err := c.cc.NewStream(ctx, &NetworkService_ServiceDesc.Streams[0], NetworkService_Gossip_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &networkServiceGossipClient{stream}
	return x, nil
}

type NetworkService_GossipClient interface {
	Send(*GossipRequest) error
	Recv() (*GossipResponse, error)
	grpc.ClientStream
}

type networkServiceGossipClient struct {
	grpc.ClientStream
}

func (x *networkServiceGossipClient) Send(m *GossipRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *networkServiceGossipClient) Recv() (*GossipResponse, error) {
	m := new(GossipResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkServiceClient) GetView(ctx context.Context, in *GetViewRequest, opts ...grpc.CallOption) (*GetViewResponse, error) {
	out := new(GetViewResponse)
	err := c.cc.Invoke(ctx, NetworkService_GetView_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) ListPeers(ctx context.Context, in *ListPeersRequest, opts ...grpc.CallOption) (*ListPeersResponse, error) {
	out := new(ListPeersResponse)
	err := c.cc.Invoke(ctx, NetworkService_ListPeers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) DialPeer(ctx context.Context, in *DialPeerRequest, opts ...grpc.CallOption) (*DialPeerResponse, error) {
	out := new(DialPeerResponse)
	err := c.cc.Invoke(ctx, NetworkService_DialPeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServiceClient) BanPeer(ctx context.Context, in *BanPeerRequest, opts ...grpc.CallOption) (*BanPeerResponse, error) {
	out := new(BanPeerResponse)
	err := c.cc.Invoke(ctx, NetworkService_BanPeer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkServiceServer is the server API for NetworkService service.
// All implementations must embed UnimplementedNetworkServiceServer
// for forward compatibility
type NetworkServiceServer interface {
	Gossip(NetworkService_GossipServer) error
	GetView(context.Context, *GetViewRequest) (*GetViewResponse, error)
	ListPeers(context.Context, *ListPeersRequest) (*ListPeersResponse, error)
	DialPeer(context.Context, *DialPeerRequest) (*DialPeerResponse, error)
	BanPeer(context.Context, *BanPeerRequest) (*BanPeerResponse, error)
	mustEmbedUnimplementedNetworkServiceServer()
}

// UnimplementedNetworkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNetworkServiceServer struct {
}

func (UnimplementedNetworkServiceServer) Gossip(NetworkService_GossipServer) error {
	return status.Errorf(codes.Unimplemented, "method Gossip not implemented")
}
func (UnimplementedNetworkServiceServer) GetView(context.Context, *GetViewRequest) (*GetViewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetView not implemented")
}
func (UnimplementedNetworkServiceServer) ListPeers(context.Context, *ListPeersRequest) (*ListPeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPeers not implemented")
}
func (UnimplementedNetworkServiceServer) DialPeer(context.Context, *DialPeerRequest) (*DialPeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DialPeer not implemented")
}
func (UnimplementedNetworkServiceServer) BanPeer(context.Context, *BanPeerRequest) (*BanPeerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BanPeer not implemented")
}
func (UnimplementedNetworkServiceServer) mustEmbedUnimplementedNetworkServiceServer() {}

// UnsafeNetworkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkServiceServer will
// result in compilation errors.
type UnsafeNetworkServiceServer interface {
	mustEmbedUnimplementedNetworkServiceServer()
}

func RegisterNetworkServiceServer(s grpc.ServiceRegistrar, srv NetworkServiceServer) {
	s.RegisterService(&NetworkService_ServiceDesc, srv)
}

func _NetworkService_Gossip_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(NetworkServiceServer).Gossip(&networkServiceGossipServer{stream})
}

type NetworkService_GossipServer interface {
	Send(*GossipResponse) error
	Recv() (*GossipRequest, error)
	grpc.ServerStream
}

type networkServiceGossipServer struct {
	grpc.ServerStream
}

func (x *networkServiceGossipServer) Send(m *GossipResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *networkServiceGossipServer) Recv() (*GossipRequest, error) {
	m := new(GossipRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _NetworkService_GetView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetViewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).GetView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_GetView_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).GetView(ctx, req.(*GetViewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_ListPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).ListPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_ListPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).ListPeers(ctx, req.(*ListPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_DialPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DialPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).DialPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_DialPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).DialPeer(ctx, req.(*DialPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkService_BanPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BanPeerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).BanPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkService_BanPeer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).BanPeer(ctx, req.(*BanPeerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkService_ServiceDesc is the grpc.ServiceDesc for NetworkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "network.v1.NetworkService",
	HandlerType: (*NetworkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetView",
			Handler:    _NetworkService_GetView_Handler,
		},
		{
			MethodName: "ListPeers",
			Handler:    _NetworkService_ListPeers_Handler,
		},
		{
			MethodName: "DialPeer",
			Handler:    _NetworkService_DialPeer_Handler,
		},
		{
			MethodName: "BanPeer",
			Handler:    _NetworkService_BanPeer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Gossip",
			Handler:       _NetworkService_Gossip_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "network/v1/network.proto",
}
