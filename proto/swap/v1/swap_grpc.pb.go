// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: swap/v1/swap.proto

package swapv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SwapService_GetPool_FullMethodName      = "/swap.v1.SwapService/GetPool"
	SwapService_ListPools_FullMethodName    = "/swap.v1.SwapService/ListPools"
	SwapService_SwapExactIn_FullMethodName  = "/swap.v1.SwapService/SwapExactIn"
	SwapService_SwapExactOut_FullMethodName = "/swap.v1.SwapService/SwapExactOut"
)

// SwapServiceClient is the client API for SwapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SwapServiceClient interface {
	GetPool(ctx context.Context, in *GetPoolRequest, opts ...grpc.CallOption) (*GetPoolResponse, error)
	ListPools(ctx context.Context, in *ListPoolsRequest, opts ...grpc.CallOption) (*ListPoolsResponse, error)
	SwapExactIn(ctx context.Context, in *SwapExactInRequest, opts ...grpc.CallOption) (*SwapExactInResponse, error)
	SwapExactOut(ctx context.Context, in *SwapExactOutRequest, opts ...grpc.CallOption) (*SwapExactOutResponse, error)
}

type swapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSwapServiceClient(cc grpc.ClientConnInterface) SwapServiceClient {
	return &swapServiceClient{cc}
}

func (c *swapServiceClient) GetPool(ctx context.Context, in *GetPoolRequest, opts ...grpc.CallOption) (*GetPoolResponse, error) {
	out := new(GetPoolResponse)
	err := c.cc.Invoke(ctx, SwapService_GetPool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swapServiceClient) ListPools(ctx context.Context, in *ListPoolsRequest, opts ...grpc.CallOption) (*ListPoolsResponse, error) {
	out := new(ListPoolsResponse)
	err := c.cc.Invoke(ctx, SwapService_ListPools_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swapServiceClient) SwapExactIn(ctx context.Context, in *SwapExactInRequest, opts ...grpc.CallOption) (*SwapExactInResponse, error) {
	out := new(SwapExactInResponse)
	err := c.cc.Invoke(ctx, SwapService_SwapExactIn_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *swapServiceClient) SwapExactOut(ctx context.Context, in *SwapExactOutRequest, opts ...grpc.CallOption) (*SwapExactOutResponse, error) {
	out := new(SwapExactOutResponse)
	err := c.cc.Invoke(ctx, SwapService_SwapExactOut_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SwapServiceServer is the server API for SwapService service.
// All implementations must embed UnimplementedSwapServiceServer
// for forward compatibility
type SwapServiceServer interface {
	GetPool(context.Context, *GetPoolRequest) (*GetPoolResponse, error)
	ListPools(context.Context, *ListPoolsRequest) (*ListPoolsResponse, error)
	SwapExactIn(context.Context, *SwapExactInRequest) (*SwapExactInResponse, error)
	SwapExactOut(context.Context, *SwapExactOutRequest) (*SwapExactOutResponse, error)
	mustEmbedUnimplementedSwapServiceServer()
}

// UnimplementedSwapServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSwapServiceServer struct {
}

func (UnimplementedSwapServiceServer) GetPool(context.Context, *GetPoolRequest) (*GetPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPool not implemented")
}
func (UnimplementedSwapServiceServer) ListPools(context.Context, *ListPoolsRequest) (*ListPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPools not implemented")
}
func (UnimplementedSwapServiceServer) SwapExactIn(context.Context, *SwapExactInRequest) (*SwapExactInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapExactIn not implemented")
}
func (UnimplementedSwapServiceServer) SwapExactOut(context.Context, *SwapExactOutRequest) (*SwapExactOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SwapExactOut not implemented")
}
func (UnimplementedSwapServiceServer) mustEmbedUnimplementedSwapServiceServer() {}

// UnsafeSwapServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SwapServiceServer will
// result in compilation errors.
type UnsafeSwapServiceServer interface {
	mustEmbedUnimplementedSwapServiceServer()
}

func RegisterSwapServiceServer(s grpc.ServiceRegistrar, srv SwapServiceServer) {
	s.RegisterService(&SwapService_ServiceDesc, srv)
}

func _SwapService_GetPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwapServiceServer).GetPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwapService_GetPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwapServiceServer).GetPool(ctx, req.(*GetPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwapService_ListPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwapServiceServer).ListPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwapService_ListPools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwapServiceServer).ListPools(ctx, req.(*ListPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwapService_SwapExactIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwapExactInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwapServiceServer).SwapExactIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwapService_SwapExactIn_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwapServiceServer).SwapExactIn(ctx, req.(*SwapExactInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SwapService_SwapExactOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SwapExactOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SwapServiceServer).SwapExactOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SwapService_SwapExactOut_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SwapServiceServer).SwapExactOut(ctx, req.(*SwapExactOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SwapService_ServiceDesc is the grpc.ServiceDesc for SwapService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SwapService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "swap.v1.SwapService",
	HandlerType: (*SwapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPool",
			Handler:    _SwapService_GetPool_Handler,
		},
		{
			MethodName: "ListPools",
			Handler:    _SwapService_ListPools_Handler,
		},
		{
			MethodName: "SwapExactIn",
			Handler:    _SwapService_SwapExactIn_Handler,
		},
		{
			MethodName: "SwapExactOut",
			Handler:    _SwapService_SwapExactOut_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "swap/v1/swap.proto",
}
